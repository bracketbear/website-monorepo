---
import type { NavigationConfig } from '../../types/navigation.js';
import Button from '../atoms/Button.astro';

interface Props {
  config: NavigationConfig;
  variant?: 'default' | 'ghost-dark' | 'ghost-light' | 'glass';
  class?: string;
}

const { config, variant = 'default', class: className } = Astro.props;
const { items: navItems, branding, socialLinks, breadcrumbs } = config;
---

<div
  class:list={[
    variant === 'ghost-dark'
      ? 'absolute top-0 right-0 left-0 z-40'
      : variant === 'glass'
        ? 'absolute top-0 right-0 left-0 z-40'
        : 'relative',
    className,
  ]}
  data-has-breadcrumbs={breadcrumbs && breadcrumbs.length > 0}
>
  <nav
    class:list={[
      'flex min-h-20 items-center border-y-2',
      variant === 'ghost-dark'
        ? 'border-transparent bg-transparent'
        : variant === 'glass'
          ? 'border-transparent glass-bg glass-shadow'
          : 'border-border bg-primary',
    ]}
    role="navigation"
    aria-label="Main navigation"
  >
    <!-- z-40: Main navigation bar -->
    <div class="container mx-auto flex h-full items-center justify-between p-4">
      <!-- Logo Section -->
      <div class="flex items-center gap-4">
        {
          branding?.logo && (
            <div class="flex h-16 w-16 items-center justify-center">
              <img
                src={branding.logo}
                alt={branding.name}
                class="text-text-primary"
              />
            </div>
          )
        }
        <div
          class:list={[
            'font-heading text-2xl leading-5.5 font-semibold tracking-wider uppercase',
            variant === 'ghost-dark'
              ? 'text-text-primary'
              : variant === 'glass'
                ? 'text-text-primary'
                : 'text-primary-foreground',
          ]}
        >
          <a
            href={branding?.href || '/'}
            class:list={[
              variant === 'ghost-dark'
                ? 'hover:text-text-primary/80'
                : variant === 'glass'
                  ? 'hover:text-text-primary/80'
                  : 'hover:text-primary-foreground/80',
              'transition-colors',
            ]}
          >
            {branding?.name || 'Brand'}
          </a>
        </div>
      </div>

      <!-- Desktop Navigation -->
      <div class="hidden items-center gap-8 md:flex">
        <ul class="relative flex items-center gap-8" role="menubar">
          </li>
          {
            navItems.map((item) => (
              <li class="group relative flex items-center" role="none">
                {item.children != null &&
                Array.isArray(item.children) &&
                item.children.length > 0 ? (
                  <div class="flex items-center">
                    <button
                      class:list={[
                        'group font-heading relative inline-flex items-center font-semibold tracking-wide uppercase transition-colors',
                        variant === 'ghost-dark'
                          ? 'hover:text-text-primary/80 text-text-primary'
                          : variant === 'glass'
                            ? 'hover:text-text-primary/80 text-text-primary'
                            : 'text-primary-foreground hover:text-primary-foreground/80',
                      ]}
                      aria-haspopup="true"
                      aria-expanded="false"
                      role="menuitem"
                      aria-label={`${item.name} menu`}
                    >
                      {item.name}
                      <svg
                        class="ml-1 h-4 w-4"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                        aria-hidden="true"
                      >
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M19 9l-7 7-7-7"
                        />
                      </svg>
                    </button>
                    <div
                      class="invisible absolute left-0 z-30 mt-2 w-48 opacity-0 transition-all duration-300 group-hover:visible group-hover:opacity-100"
                      role="menu"
                      aria-label={`${item.name} submenu`}
                    >
                      <!-- z-30: Dropdown submenu (below main navigation) -->
                      <div
                        class:list={[
                          'border-border py-4 shadow-[8px_8px_0_0_var(--color-border)]',
                          variant === 'ghost-dark'
                            ? 'bg-muted'
                            : variant === 'glass'
                              ? 'glass-bg-light'
                              : 'bg-card',
                        ]}
                      >
                        {item.children.map((child) => (
                          <a
                            href={child.href}
                            class:list={[
                              'font-heading block px-4 py-4 text-sm font-semibold tracking-wide uppercase transition-colors',
                              variant === 'ghost-light'
                                ? 'hover:bg-card hover:text-text-primary text-text-primary'
                                : variant === 'glass'
                                  ? 'text-text-primary hover:text-text-primary glass-hover'
                                  : 'text-primary-foreground hover:bg-muted hover:text-muted-foreground',
                            ]}
                            role="menuitem"
                          >
                            {child.name}
                          </a>
                        ))}
                      </div>
                    </div>
                  </div>
                ) : (
                  <a
                    class:list={[
                      'group link-underline font-heading relative font-semibold tracking-wide uppercase transition-all text-shadow-lg',
                      variant === 'ghost-dark'
                        ? 'hover:text-text-primary/80 text-text-primary'
                        : variant === 'glass'
                          ? 'hover:text-text-primary/80 text-text-primary'
                          : 'text-text-primary hover:text-text-primary/80',
                    ]}
                    href={item.href}
                    role="menuitem"
                  >
                    {item.name}
                  </a>
                )}
              </li>
            ))
          }
        </ul>
      </div>

      <!-- Mobile Menu Button -->
      <Button
        class:list={[
          'p-2 md:hidden',
          variant === 'glass' ? 'button-transparent-dark' : '',
        ]}
        variant={variant === 'glass' ? 'unstyled' : 'dark'}
        id="mobile-menu-button"
        type="button"
        aria-label="Open mobile navigation menu"
        aria-expanded="false"
        aria-controls="mobile-menu"
      >
        <svg
          class="h-6 w-6"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
          aria-hidden="true"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M4 6h16M4 12h16M4 18h16"></path>
        </svg>
      </Button>
    </div>
  </nav>

  <!-- Breadcrumbs Section -->
  {
    breadcrumbs && breadcrumbs.length > 0 && (
      <div
        class:list={[
          'min-h-8 border-b transition-all duration-300',
          variant === 'glass'
            ? 'bg-white/20 backdrop-blur-md border-white/30 shadow-lg'
            : 'border-border/20 bg-muted/30',
        ]}
      >
        <div class="container mx-auto px-4 py-2">
          <nav class="text-sm" aria-label="Breadcrumb navigation">
            <ol class="flex items-center space-x-2">
              {breadcrumbs.map((crumb, idx) => (
                <>
                  <li>
                    {crumb.href ? (
                      <a
                        href={crumb.href}
                        aria-label={crumb.label}
                        title={crumb.label}
                        class:list={[
                          'font-medium tracking-wide transition-colors',
                          variant === 'glass'
                            ? 'text-text-primary/70 hover:text-text-primary'
                            : 'text-muted-foreground hover:text-foreground',
                        ]}
                      >
                        {crumb.label}
                      </a>
                    ) : (
                      <span
                        class:list={[
                          'font-medium tracking-wide',
                          variant === 'glass'
                            ? 'text-text-primary'
                            : 'text-muted-foreground',
                        ]}
                      >
                        {crumb.label}
                      </span>
                    )}
                  </li>
                  {idx < breadcrumbs.length - 1 && (
                    <li
                      class:list={[
                        'font-medium',
                        variant === 'glass'
                          ? 'text-text-primary/40'
                          : 'text-muted-foreground/60',
                        ]}
                      >
                        /
                      </li>
                  )}
                </>
              ))}
            </ol>
          </nav>
        </div>
      </div>
    )
  }
</div>

<!-- Mobile Menu Overlay - OUTSIDE nav to prevent overflow clipping -->
<!-- z-[60]: Mobile menu overlay and drawer (above hero section z-50) -->
<div
  id="mobile-menu-overlay"
  class:list={[
    'fixed inset-0 z-[60] hidden transition-opacity duration-300 overflow-hidden',
    variant === 'glass'
      ? 'bg-black/60 backdrop-blur-md'
      : 'bg-black/50 backdrop-blur-sm',
  ]}
  aria-hidden="true"
>
</div>

<!-- Mobile Menu Drawer - OUTSIDE nav to prevent overflow clipping -->
<!-- z-[60]: Mobile menu drawer (same level as overlay) -->
<div
  id="mobile-menu-drawer"
  class:list={[
    'fixed top-0 right-0 z-[60] h-full transition-all duration-300 ease-in-out overflow-hidden hidden shadow-2xl',
    'w-96 max-w-[90vw]', // Larger width
    variant === 'glass'
      ? 'glass-bg-light glass-border glass-shadow-lg'
      : 'bg-white',
  ]}
  style="right: -100%;"
  role="dialog"
  aria-modal="true"
  aria-labelledby="mobile-menu-title"
  aria-hidden="true"
  tabindex="-1"
>
  <!-- Header -->
  <div
    class:list={[
      'flex h-16 items-center justify-between border-b px-6',
      variant === 'glass'
        ? 'glass-border'
        : 'border-gray-200',
    ]}
  >
    <h2
      id="mobile-menu-title"
      class:list={[
        'font-heading text-xl font-semibold tracking-wide uppercase',
        variant === 'glass'
          ? 'glass-text'
          : 'text-gray-900',
      ]}
    >
      Navigation
    </h2>
    <Button
      id="mobile-menu-close"
      variant={variant === 'glass' ? 'ghostLight' : 'ghost'}
      size="icon"
      aria-label="Close mobile navigation menu"
    >
      <svg
        class="h-6 w-6"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
        aria-hidden="true"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M6 18L18 6M6 6l12 12"></path>
      </svg>
    </Button>
  </div>

  <!-- Navigation Items -->
  <nav
    class="flex-1 overflow-y-auto px-6 py-4"
    aria-label="Mobile navigation"
  >
    <ul class="space-y-2" role="menubar">
      {
        navItems.map((item) => (
          <li role="none">
            {item.children != null &&
            Array.isArray(item.children) &&
            item.children.length > 0 ? (
              <div class="space-y-2">
                <div
                  class:list={[
                    'font-heading font-semibold tracking-wide uppercase',
                    variant === 'glass'
                      ? 'glass-text'
                      : 'text-gray-900',
                  ]}
                >
                  {item.name}
                </div>
                <ul
                  class="space-y-1 pl-4"
                  role="menu"
                  aria-label={`${item.name} submenu`}
                >
                  {item.children.map((child) => (
                    <li role="none">
                      <a
                        href={child.href}
                        role="menuitem"
                        class:list={[
                          'block rounded-md px-3 py-2 text-sm transition-colors',
                          variant === 'glass'
                            ? 'glass-text-muted hover:glass-hover hover:glass-text'
                            : 'text-gray-600 hover:bg-gray-50 hover:text-gray-900',
                        ]}
                      >
                        {child.name}
                      </a>
                    </li>
                  ))}
                </ul>
              </div>
            ) : (
              <a
                href={item.href}
                role="menuitem"
                class:list={[
                  'block rounded-md px-3 py-3 text-lg font-semibold transition-colors',
                  variant === 'glass'
                    ? 'glass-text hover:glass-hover'
                    : 'text-gray-900 hover:bg-gray-50',
                ]}
              >
                {item.name}
              </a>
            )}
          </li>
        ))
      }
    </ul>
  </nav>

  <!-- Footer with Social Links -->
  <div
    class:list={[
      'border-t px-6 py-4',
      variant === 'glass'
        ? 'glass-border'
        : 'border-gray-200',
    ]}
  >
    <div class="flex items-center justify-center space-x-4">
      {
        socialLinks?.linkedin && (
          <a
            href={socialLinks.linkedin}
            class:list={[
              'button button-ghost button-icon-rounded',
              variant === 'glass' ? 'button-ghost-light' : 'button-ghost',
            ]}
            aria-label="Visit LinkedIn profile"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="16"
              height="16"
              viewBox="0 0 24 24"
              fill="currentColor"
              aria-hidden="true"
            >
              <path d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z" />
            </svg>
          </a>
        )
      }
    </div>
  </div>
</div>

<script>
  function setupMobileMenu() {
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const mobileMenuDrawer = document.getElementById('mobile-menu-drawer');
    const mobileMenuOverlay = document.getElementById('mobile-menu-overlay');
    const mobileMenuClose = document.getElementById('mobile-menu-close');

    if (
      !mobileMenuButton ||
      !mobileMenuDrawer ||
      !mobileMenuOverlay ||
      !mobileMenuClose
    ) {
      console.warn('Mobile menu elements not found');
      return;
    }

    let isOpen = false;
    let isAnimating = false;

    function openMenu() {
      if (isAnimating || isOpen) return;

      isAnimating = true;
      isOpen = true;

      // Show overlay first
      mobileMenuOverlay!.classList.remove('hidden');
      mobileMenuOverlay!.classList.add('opacity-100');

      // Then show drawer
      mobileMenuDrawer!.classList.remove('hidden');

      // Use requestAnimationFrame for smooth animation
      requestAnimationFrame(() => {
        mobileMenuDrawer!.style.right = '0'; // Use right: 0 for smooth transition
      });

      // Update ARIA attributes
      mobileMenuButton!.setAttribute('aria-expanded', 'true');
      mobileMenuDrawer!.setAttribute('aria-hidden', 'false');
      mobileMenuOverlay!.setAttribute('aria-hidden', 'false');

      // Focus management
      mobileMenuDrawer!.focus();

      // Prevent body scroll
      document.body.style.overflow = 'hidden';

      // Animation complete
      setTimeout(() => {
        isAnimating = false;
      }, 300);
    }

    function closeMenu() {
      if (isAnimating || !isOpen) return;

      isAnimating = true;
      isOpen = false;

      // Start slide-out animation
      mobileMenuDrawer!.style.right = '-100%'; // Use right: -100% for smooth transition
      mobileMenuOverlay!.classList.remove('opacity-100');

      // Update ARIA attributes
      mobileMenuButton!.setAttribute('aria-expanded', 'false');
      mobileMenuDrawer!.setAttribute('aria-hidden', 'true');
      mobileMenuOverlay!.setAttribute('aria-hidden', 'true');

      // Restore body scroll
      document.body.style.overflow = '';

      // Return focus to menu button
      mobileMenuButton!.focus();

      // Hide elements after animation completes
      setTimeout(() => {
        mobileMenuDrawer!.classList.add('hidden');
        mobileMenuOverlay!.classList.add('hidden');

        // Reset transform to prevent layout issues
        mobileMenuDrawer!.style.right = ''; // Reset right

        isAnimating = false;
      }, 300);
    }

    // Event listeners
    mobileMenuButton.addEventListener('click', (e) => {
      e.preventDefault();
      e.stopPropagation();
      openMenu();
    });

    mobileMenuClose.addEventListener('click', (e) => {
      e.preventDefault();
      e.stopPropagation();
      closeMenu();
    });

    mobileMenuOverlay.addEventListener('click', (e) => {
      e.preventDefault();
      e.stopPropagation();
      closeMenu();
    });

    // Close on escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && isOpen && !isAnimating) {
        closeMenu();
      }
    });

    // Close on window resize (desktop)
    window.addEventListener('resize', () => {
      if (window.innerWidth >= 768 && isOpen && !isAnimating) {
        closeMenu();
      }
    });

    // Close on navigation (if user clicks a link)
    const mobileMenuLinks = mobileMenuDrawer!.querySelectorAll('a[href]');
    mobileMenuLinks.forEach((link) => {
      link.addEventListener('click', () => {
        if (isOpen && !isAnimating) {
          closeMenu();
        }
      });
    });

    // Initialize state - ensure menu is hidden
    mobileMenuDrawer!.classList.add('hidden');
    mobileMenuOverlay!.classList.add('hidden');
    mobileMenuDrawer!.style.right = ''; // Reset right
    mobileMenuButton!.setAttribute('aria-expanded', 'false');
    mobileMenuDrawer!.setAttribute('aria-hidden', 'true');
    mobileMenuOverlay!.setAttribute('aria-hidden', 'true');
  }

  // Setup when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', setupMobileMenu);
  } else {
    setupMobileMenu();
  }
</script>
