---
import type { NavigationConfig } from '../../types/navigation.js';
import { NAVIGATION_CONSTANTS } from '../../utils/constants.js';
import Button from '../atoms/Button.astro';

interface Props {
  config: NavigationConfig;
  variant?: 'default' | 'ghost-dark' | 'ghost-light';
}

const { config, variant = 'default' } = Astro.props;
const { items: navItems, branding, socialLinks } = config;
---

<nav
  class:list={[
    'flex min-h-20 items-center border-y-2',
    variant === 'ghost-dark'
      ? 'absolute top-0 right-0 left-0 z-50 border-transparent bg-transparent'
      : 'border-foreground bg-brand-orange',
  ]}
>
  <div
    class="container mx-auto flex h-full items-center justify-between px-6 py-4"
  >
    <!-- Logo Section -->
    <div class="flex items-center gap-4">
      {
        branding?.logo && (
          <div class="flex h-16 w-16 items-center justify-center">
            <img src={branding.logo} alt={branding.name} class="text-white" />
          </div>
        )
      }
      <div
        class:list={[
          'font-heading text-2xl leading-5.5 font-black tracking-wider uppercase',
          variant === 'ghost-dark' ? 'text-white' : 'text-foreground',
        ]}
      >
        <a
          href={branding?.href || '/'}
          class:list={[
            variant === 'ghost-dark' ? 'hover:text-brand-light' : '',
            'transition-colors',
          ]}
        >
          {branding?.name || 'Brand'}
        </a>
      </div>
    </div>

    <!-- Desktop Navigation -->
    <div class="hidden items-center gap-8 md:flex">
      <ul class="flex gap-8">
        {
          navItems.map((item) => (
            <li class="group relative">
              {item.children != null &&
              Array.isArray(item.children) &&
              item.children.length > 0 ? (
                <div>
                  <button
                    class:list={[
                      'group relative inline-flex items-center font-black uppercase transition-colors',
                      variant === 'ghost-dark'
                        ? 'hover:text-brand-light text-white'
                        : 'text-foreground',
                    ]}
                  >
                    {item.name}
                    <svg
                      class="ml-1 h-4 w-4"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M19 9l-7 7-7-7"
                      />
                    </svg>
                  </button>
                  <div class="invisible absolute left-0 z-50 mt-2 w-48 opacity-0 transition-all duration-300 group-hover:visible group-hover:opacity-100">
                    <div
                      class:list={[
                        'border-default py-4 shadow-[8px_8px_0_0_#111111]',
                        variant === 'ghost-dark'
                          ? 'bg-brand-dark'
                          : NAVIGATION_CONSTANTS.BACKGROUND_COLOR,
                      ]}
                    >
                      {item.children.map((child) => (
                        <a
                          href={child.href}
                          class:list={[
                            'block px-4 py-4 text-sm font-black uppercase transition-colors',
                            variant === 'ghost-light'
                              ? 'hover:bg-brand-light hover:text-brand-dark text-white'
                              : 'text-foreground hover:bg-foreground hover:text-primary',
                          ]}
                        >
                          {child.name}
                        </a>
                      ))}
                    </div>
                  </div>
                </div>
              ) : (
                <a
                  class:list={[
                    'group link-underline relative font-black uppercase transition-all hover:translate-x-[-1px] hover:translate-y-[-1px]',
                    variant === 'ghost-dark'
                      ? 'hover:text-brand-light text-white'
                      : 'text-foreground',
                  ]}
                  href={item.href}
                >
                  {item.name}
                </a>
              )}
            </li>
          ))
        }
      </ul>

      <!-- Theme and Social Links -->
      <div class="flex items-center gap-4">
        {
          socialLinks?.linkedin && (
            <a
              href={socialLinks.linkedin}
              class:list={[
                'flex h-10 w-10 items-center justify-center transition-all hover:translate-x-[-2px] hover:translate-y-[-2px]',
                variant === 'ghost-dark'
                  ? 'hover:text-brand-light text-white'
                  : '',
              ]}
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="20"
                height="20"
                viewBox="0 0 24 24"
                fill="currentColor"
                class:list={[
                  variant === 'ghost-dark' ? 'text-white' : 'text-foreground',
                ]}
              >
                <path d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z" />
              </svg>
            </a>
          )
        }
      </div>
    </div>

    <!-- Mobile Menu Button -->
    <Button
      class="p-2 md:hidden"
      variant="ghostDark"
      id="mobile-menu-button"
      type="button"
    >
      <svg
        class="h-6 w-6"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M4 6h16M4 12h16M4 18h16"></path>
      </svg>
    </Button>
  </div>

  <!-- Mobile Menu -->
  <div
    id="mobile-menu"
    class="border-default bg-background fixed top-0 right-0 z-50 h-screen w-4/5 max-w-sm translate-x-full transform overflow-y-auto transition-transform duration-300"
  >
    <div class="p-6">
      <Button
        id="close-menu-button"
        class="absolute top-4 right-4"
        variant="ghostLight"
        type="button"
        size="sm"
      >
        <svg
          class="text-foreground h-6 w-6"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </Button>

      <ul class="mt-8 space-y-4">
        {
          navItems.map((item) => (
            <li>
              {item.children != null &&
              Array.isArray(item.children) &&
              item.children.length > 0 ? (
                <div class="space-y-2">
                  <div class="text-foreground font-black uppercase">
                    {item.name}
                  </div>
                  <ul class="space-y-2 pl-4">
                    {item.children.map((child) => (
                      <li>
                        <a
                          href={child.href}
                          class="text-foreground block font-bold uppercase transition-transform hover:translate-x-1"
                        >
                          {child.name}
                        </a>
                      </li>
                    ))}
                  </ul>
                </div>
              ) : (
                <a
                  href={item.href}
                  class="text-foreground block font-black uppercase transition-transform hover:translate-x-1"
                >
                  {item.name}
                </a>
              )}
            </li>
          ))
        }
      </ul>

      <!-- Mobile Theme and Social Links -->
      <div class="mt-8 flex items-center gap-4">
        {
          socialLinks?.linkedin && (
            <a
              href={socialLinks.linkedin}
              class="flex h-10 w-10 items-center justify-center transition-all hover:translate-x-[-2px] hover:translate-y-[-2px] hover:shadow-[4px_4px_0_0_#111111]"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="16"
                height="16"
                viewBox="0 0 24 24"
                fill="currentColor"
                class="text-foreground"
              >
                <path d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z" />
              </svg>
            </a>
          )
        }
      </div>
    </div>
  </div>

  <!-- Mobile Menu Overlay -->
  <div
    id="mobile-menu-overlay"
    class="fixed inset-0 z-40 hidden bg-black/60 opacity-0 transition-opacity duration-300"
    style="background-image: radial-gradient(circle at 2px 2px, rgba(0,0,0,0.4) 1px, transparent 1px); background-size: 8px 8px;"
  >
  </div>
</nav>

<script>
  function setupMobileMenu() {
    const mobileMenu = document.getElementById('mobile-menu');
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const closeMenuButton = document.getElementById('close-menu-button');
    const mobileMenuOverlay = document.getElementById('mobile-menu-overlay');

    // Only proceed if we have the required elements
    if (
      !mobileMenu ||
      !mobileMenuButton ||
      !closeMenuButton ||
      !mobileMenuOverlay
    ) {
      console.warn('Mobile menu elements not found');
      return;
    }

    const openMenu = () => {
      mobileMenu.classList.remove('translate-x-full');
      mobileMenuOverlay.classList.remove('hidden', '-z-40');
      setTimeout(() => {
        mobileMenuOverlay.classList.add('opacity-50', 'z-40');
      }, 10);
      document.body.style.overflow = 'hidden';
    };

    const closeMenu = () => {
      mobileMenu.classList.add('translate-x-full');
      mobileMenuOverlay.classList.remove('opacity-50', 'z-40');
      setTimeout(() => {
        mobileMenuOverlay.classList.add('hidden', '-z-40');
      }, 300);
      document.body.style.overflow = '';
    };

    // Add event listeners
    mobileMenuButton.addEventListener('click', (e) => {
      e.stopPropagation();
      openMenu();
    });

    closeMenuButton.addEventListener('click', (e) => {
      e.stopPropagation();
      closeMenu();
    });

    mobileMenuOverlay.addEventListener('click', (e) => {
      e.stopPropagation();
      closeMenu();
    });

    // Only close menu when clicking outside AND menu is open
    document.addEventListener('click', (e) => {
      const target = e.target as Node;
      const isMenuOpen = !mobileMenu.classList.contains('translate-x-full');

      if (
        isMenuOpen &&
        !mobileMenu.contains(target) &&
        !mobileMenuButton.contains(target)
      ) {
        closeMenu();
      }
    });
  }

  // Run setup when the DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', setupMobileMenu);
  } else {
    setupMobileMenu();
  }
</script>
