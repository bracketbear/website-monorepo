{
  "title": "Bridge",
  "job": "ds-lead-front-end-developer",
  "duration": "18 Months",
  "coverImage": "/work/projects/ds-bridge/coverImage.png",
  "summary": "A SaaS content management system for experiences",
  "media": [
    {
      "image": "/work/projects/ds-bridge/media/0/image.png",
      "caption": "A look at the scheduling in Bridge.",
      "alt": "A screenshot of the scheduling feature in Downstream's Bridge application."
    },
    {
      "image": "/work/projects/ds-bridge/media/1/image.jpg",
      "caption": "A look at some of the inputs used in Bridge",
      "alt": "A look at some of the web inputs used in Bridge's forms"
    },
    {
      "image": "/work/projects/ds-bridge/media/2/image.webp",
      "caption": "A admittedly fuzzy look at the media library.",
      "alt": "An image of the media library in Downstream's Bridge application."
    }
  ],
  "isFeatured": true,
  "category": "experiential-content-management-systems",
  "skills": [
    "typescript",
    "vue",
    "vite",
    "tailwind-css",
    "rust",
    "git",
    "docker",
    "html",
    "css",
    "figma"
  ],
  "cta": {
    "text": "Have systems that need to work together? I can help map the problem and build the glue.",
    "buttonText": "Talk details",
    "buttonLink": "/reach-out"
  },
  "oneLiner": "A CMS UI for installs—front‑end on Vue 3 + TypeScript over a Rust back end.",
  "problem": "Downstream needed a dependable CMS interface for experiential projects. The existing setup was split across versions and tooling, and the UI had to evolve while a Rust back end was taking shape.",
  "scope": [
    "Led front‑end development for Bridge UI",
    "Migrated components from Vue 2 → Vue 3 (during beta)",
    "Converted the app to TypeScript",
    "Moved the build from Webpack to Vite",
    "Implemented service workers for cross‑tab comms and delta polling",
    "Read Rust code to map/validate data shapes in the UI"
  ],
  "decisions": [
    "Adopted Vite for faster, simpler builds",
    "Introduced strict typing to stabilize integration with the Rust API",
    "Used a service worker to coordinate multiple tabs and background polling",
    "Established patterns for component structure and data flow so future work stayed consistent"
  ],
  "outcome": "A stable, faster UI layer that played nicely with the Rust services and made day‑to‑day authoring predictable.",
  "notes": "If I did it again, I’d generate types from the Rust models to remove a class of mapping bugs. This would have been a great way of keeping the two sides of the app in sync.",
  "status": "shipped",
  "links": [
    {
      "label": "Official Bridge Website",
      "href": "https://www.downstream.com/bridge?hsCtaAttrib=177686930710"
    }
  ],
  "a11y": {
    "coverAlt": "Bridge CMS UI showing the project tree structure."
  },
  "teaser": {
    "headline": "A SaaS content management system for experiences",
    "subline": "Led the front‑end and moved the stack to Vue 3 + TypeScript"
  },
  "impactTags": [
    "maintainability",
    "developer-experience",
    "performance"
  ]
}
