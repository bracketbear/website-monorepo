---
import { getCollection } from 'astro:content';
import type { GetStaticPaths } from 'astro';
import Layout from '@/layouts/Layout.astro';
import { getKeyedCollection } from '@/utils/content';
import { Stats } from '@bracketbear/core/react';
import { getProjectImageUrl } from '@bracketbear/astro-content';

export const getStaticPaths: GetStaticPaths = async () => {
  const workProjects = await getCollection('workProject');
  return workProjects.map((project) => ({
    params: { workProject: project.id },
  }));
};

const workJobs = await getCollection('workJobs');
const workSkills = await getCollection('workSkills');
const workProjects = await getCollection('workProject');
const workCompanies = await getKeyedCollection('workCompany');
const projectCategories = await getCollection('workProjectCategory');

const workProject = workProjects.find(
  (project) => project.id === Astro.params.workProject
);

if (workProject === undefined) {
  throw new Error(`Project not found: ${Astro.params.workProject}`);
}

// Get related data
const job = workJobs.find((job) => job.id === workProject.data.job);
const category = projectCategories.find(
  (category) => category.id === workProject.data.category
);
const projectSkills = workSkills.filter((skill) =>
  (workProject.data.skills ?? []).includes(skill.id)
);
const companyTitle =
  job !== undefined ? workCompanies[job.data.company].data.title : 'Unknown';

// Helper function to format skills as text
function formatSkillsText(skills: any[]): string {
  return skills.map((skill) => skill.data.title).join(', ');
}

// Define stats data
const stats = [
  ...(job !== undefined
    ? [
        {
          label: 'Company',
          value: companyTitle,
        },
      ]
    : []),
  {
    label: 'Duration',
    value: workProject.data.duration,
  },
  ...(projectSkills.length > 0
    ? [
        {
          label: 'Technologies',
          value: formatSkillsText(projectSkills),
        },
      ]
    : []),
];
---

<Layout>
  <title>{workProject.data.title} | Bracket Bear</title>

  <!-- Hero Section -->
  <div class="bg-background py-24">
    <div class="container mx-auto px-6">
      <div class="border-default bg-background mb-8 inline-block p-8">
        <h1 class="text-foreground text-5xl font-black uppercase">
          {workProject.data.title}
        </h1>
      </div>

      {
        category !== undefined && (
          <span class="border-default bg-coral text-foreground px-4 py-2 text-lg font-black">
            {category.data.title}
          </span>
        )
      }

      <p class="text-foreground mt-8 max-w-3xl text-xl font-bold">
        {workProject.data.description}
      </p>
    </div>
  </div>

  <!-- Project Stats -->
  <div class="bg-background border-y-2 border-black py-8">
    <div class="container mx-auto px-6">
      <Stats stats={stats} />
    </div>
  </div>

  <!-- Main Content -->
  <div class="bg-background py-16">
    <div class="container mx-auto px-6">
      <div class="grid gap-8 md:grid-cols-3">
        <!-- Main Column -->
        <div class="space-y-16 md:col-span-2">
          <!-- Description -->
          {
            workProject.data.description?.trim() !== '' && (
              <section class="border-default bg-background p-8">
                <h2 class="text-foreground mb-6 text-2xl font-black uppercase">
                  Overview
                </h2>
                <p class="text-foreground text-lg font-bold">
                  {workProject.data.description}
                </p>
              </section>
            )
          }

          <!-- Challenges & Solutions -->
          {
            workProject.data.challengesAndSolutions?.trim() !== '' && (
              <section class="border-default bg-background p-8">
                <h2 class="text-foreground mb-6 text-2xl font-black uppercase">
                  Challenges & Solutions
                </h2>
                <p class="text-foreground text-lg font-bold">
                  {workProject.data.challengesAndSolutions}
                </p>
              </section>
            )
          }

          <!-- Results -->
          {
            workProject.data.resultsAchieved?.trim() !== '' && (
              <section class="border-default bg-background p-8">
                <h2 class="text-foreground mb-6 text-2xl font-black uppercase">
                  Results Achieved
                </h2>
                <p class="text-foreground text-lg font-bold">
                  {workProject.data.resultsAchieved}
                </p>
              </section>
            )
          }

          <!-- Media Gallery -->
          {
            (workProject.data.media ?? []).length > 0 && (
              <section class="border-default bg-background p-8">
                <h2 class="text-foreground mb-6 text-2xl font-black uppercase">
                  Project Gallery
                </h2>
                {workProject.data.mediaDescription && (
                  <p class="text-foreground mb-8 text-lg">
                    {workProject.data.mediaDescription}
                  </p>
                )}
                <div class="grid grid-cols-2 gap-6 md:grid-cols-3">
                  {(workProject.data.media ?? []).map(
                    async (mediaItem: any) => {
                      if (!mediaItem?.image) return null;

                      let imageUrl: string;
                      try {
                        imageUrl = getProjectImageUrl(
                          workProject.id,
                          mediaItem.image
                        );
                      } catch (error) {
                        console.warn(
                          `Failed to load media image: ${mediaItem.image}`,
                          error
                        );
                        return null;
                      }

                      return (
                        <div class="aspect-video overflow-hidden rounded-lg">
                          <img
                            src={imageUrl}
                            alt={mediaItem.caption || workProject.data.title}
                            class="h-full w-full object-cover"
                          />
                        </div>
                      );
                    }
                  )}
                </div>
              </section>
            )
          }
        </div>

        <!-- Sidebar -->
        <div class="space-y-8">
          <!-- Project Details -->
          <div class="border-default bg-background p-8">
            <h3 class="text-foreground mb-6 text-xl font-black uppercase">
              Project Details
            </h3>
            <div class="space-y-4">
              {
                job !== undefined && (
                  <div>
                    <h4 class="text-foreground mb-2 text-sm font-black uppercase">
                      Role
                    </h4>
                    <p class="text-foreground font-bold">{job.data.title}</p>
                  </div>
                )
              }
              {
                workProject.data.isFeatured === true && (
                  <div>
                    <span class="border-default bg-coral text-foreground px-4 py-2 text-sm font-black">
                      Featured Project
                    </span>
                  </div>
                )
              }
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</Layout>
