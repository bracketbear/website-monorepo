---
import { getCollection } from 'astro:content';
import Layout from '@/layouts/Layout.astro';
import ProjectCardList from '@/components/ProjectCardList.astro';
import AboutSection from '@/components/AboutSection.astro';
import ServicesSection from '@/components/ServicesSection.astro';
import WorkHistory from '@/components/WorkHistory';
import SkillsTicker from '@/components/SkillsTicker';
import ChooseUsSection from '@/components/ChooseUsSection.astro';
import '../styles/global.css';

const snakeText = [
  'Software Engineer.',
  'Problem Solver.',
  'Creative Developer.',
] as const;

const jobs = await getCollection('workJobs');
const companies = await getCollection('workCompany');
const skills = await getCollection('workSkills');
---

<Layout>
  <!-- Brutalist Header Section -->
  <header
    class="bg-brand-red dark:bg-brand-red/20 relative z-0 overflow-hidden pt-24"
  >
    <canvas
      id="particle-canvas"
      class="fixed top-0 left-0 -z-10 h-screen w-screen"></canvas>
    <div class="relative z-10 container mx-auto px-6">
      <div class="mb-16 max-w-4xl">
        <div class="inline-block">
          <h1
            class="text-brand-light text-8xl font-black tracking-tight uppercase"
          >
            Experiential<br />
            Full-Stack<br />
            Pressure Relief Valve
          </h1>
        </div>
        <div class="snake-text-container mt-8">
          {
            snakeText.map((text, index) => (
              <p
                class="snake-text text-foreground hover:text-primary text-2xl font-bold tracking-tight uppercase"
                style="--index: {index}"
              >
                {text}
              </p>
            ))
          }
        </div>
      </div>
      <!-- Availability Announcement -->
      <div
        class="mt-16 w-full lg:absolute lg:top-24 lg:right-6 lg:mt-0 lg:w-96"
      >
        <div
          class="availability-box brutalist-border bg-tertiary text-background transform p-6 lg:rotate-2"
        >
          <h2 class="mb-2 text-4xl font-black tracking-tight uppercase">
            Available Now!
          </h2>
          <p class="mb-4 text-xl font-bold">
            Open to <span class="text-foreground bg-background px-2 py-1"
              >full-time</span
            >
            and <span class="text-foreground bg-background px-2 py-1"
              >contract</span
            > full-stack roles.<br />
            Let's build something amazing together.
          </p>
          <a
            href="mailto:contact@bracketbear.com"
            class="brutalist-border text-foreground bg-background border-background inline-block px-6 py-3 text-lg font-black transition-transform hover:scale-105"
          >
            Let's Talk â†’
          </a>
        </div>
      </div>
    </div>
    <!-- Skills Ticker -->
    <SkillsTicker skills={skills} client:load />
  </header>

  <main class="bg-background">
    <AboutSection className="bg-primary" />
    <ServicesSection className="bg-secondary" />
    <ChooseUsSection className="bg-tertiary" />

    <!-- Projects Section -->
    <section id="projects" class="bg-brand-green relative py-24">
      <div class="relative z-10 container mx-auto px-6">
        <h2
          class="brutalist-border bg-background text-foreground mb-16 inline-block p-6 text-5xl font-black tracking-tight uppercase"
        >
          Project Showcase
        </h2>
        <ProjectCardList variant="simple" />
      </div>
    </section>

    <!-- Work History Section -->
    <section
      id="history"
      class="bg-brand-purple relative overflow-hidden py-24"
    >
      <div class="relative z-10 container mx-auto px-6">
        <h2
          class="brutalist-border bg-background text-foreground mb-16 inline-block p-6 text-5xl font-black tracking-tight uppercase"
        >
          Work History
        </h2>
        <WorkHistory jobs={jobs} companies={companies} skills={skills} />
      </div>
    </section>
  </main>
</Layout>

<style>
  @keyframes shake {
    0%,
    100% {
      transform: rotate(2deg) translate(0, 0) scale(1);
    }
    25% {
      transform: rotate(3deg) translate(-2px, -2px) scale(1.02);
    }
    50% {
      transform: rotate(1deg) translate(2px, 2px) scale(1.05);
    }
    75% {
      transform: rotate(3deg) translate(-2px, 2px) scale(1.02);
    }
  }

  .shake-animation {
    animation: shake 0.5s ease-in-out;
    transform-style: preserve-3d;
    perspective: 1000px;
  }

  .availability-box {
    transform-style: preserve-3d;
    transition: transform 0.3s ease;
  }

  .snake-text-container {
    position: relative;
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
  }

  .snake-text {
    position: relative;
    transform-origin: left;
  }
</style>

<script>
  interface Particle {
    x: number;
    y: number;
    size: number;
    speedX: number;
    speedY: number;
    rotation: number;
    rotationSpeed: number;
    type: 'plus' | 'logo' | 'dot';
  }

  class ParticleAnimation {
    private canvas: HTMLCanvasElement;
    private ctx: CanvasRenderingContext2D;
    private particles: Particle[];
    private particleCount: number;
    private logoImage: HTMLImageElement;
    private announcementBox: HTMLElement | null;

    constructor() {
      this.canvas = document.getElementById(
        'particle-canvas'
      ) as HTMLCanvasElement;
      this.ctx = this.canvas.getContext('2d') as CanvasRenderingContext2D;
      this.particles = [];
      this.particleCount = 50;
      this.logoImage = new Image();
      this.logoImage.src = '/favicon.svg';
      this.announcementBox = document.querySelector('.availability-box');

      this.init();
      this.animate();
      this.startShakeAnimation();
    }

    private startShakeAnimation(): void {
      if (!this.announcementBox) return;

      const shakeInterval = () => {
        this.announcementBox?.classList.add('shake-animation');
        setTimeout(() => {
          this.announcementBox?.classList.remove('shake-animation');
        }, 500);
      };

      // Initial shake
      setTimeout(shakeInterval, 2000);

      // Repeat every 8-12 seconds
      const repeatShake = () => {
        const randomDelay = Math.floor(Math.random() * 4000) + 8000; // 8-12 seconds
        setTimeout(() => {
          shakeInterval();
          repeatShake();
        }, randomDelay);
      };

      repeatShake();
    }

    private init(): void {
      // Set canvas size
      const resize = (): void => {
        const dpr = window.devicePixelRatio || 1;
        this.canvas.width = this.canvas.offsetWidth * dpr;
        this.canvas.height = this.canvas.offsetHeight * dpr;
        this.ctx.scale(dpr, dpr);
      };

      window.addEventListener('resize', resize);
      resize();

      // Create initial particles
      for (let i = 0; i < this.particleCount; i++) {
        this.particles.push(this.createParticle());
      }
    }

    private createParticle(): Particle {
      return {
        x: Math.random() * this.canvas.width,
        y: Math.random() * this.canvas.height,
        size: Math.random() * 20 + 10,
        speedX: Math.random() * 2 - 1,
        speedY: Math.random() * 2 - 1,
        rotation: Math.random() * Math.PI * 2,
        rotationSpeed: (Math.random() - 0.5) * 0.02,
        type:
          Math.random() < 0.2 ? 'logo' : Math.random() < 0.5 ? 'plus' : 'dot',
      };
    }

    private drawPlus(
      x: number,
      y: number,
      size: number,
      rotation: number
    ): void {
      this.ctx.save();
      this.ctx.translate(x, y);
      this.ctx.rotate(rotation);

      this.ctx.strokeStyle = 'rgba(191, 87, 0, 0.3)';
      this.ctx.lineWidth = 2;
      this.ctx.beginPath();

      // Horizontal line
      this.ctx.moveTo(-size / 2, 0);
      this.ctx.lineTo(size / 2, 0);

      // Vertical line
      this.ctx.moveTo(0, -size / 2);
      this.ctx.lineTo(0, size / 2);

      this.ctx.stroke();
      this.ctx.restore();
    }

    private drawLogo(
      x: number,
      y: number,
      size: number,
      rotation: number
    ): void {
      this.ctx.save();
      this.ctx.translate(x, y);
      this.ctx.rotate(rotation);

      // Apply the dark orange tint to the logo
      this.ctx.globalAlpha = 0.3;
      this.ctx.filter =
        'sepia(100%) hue-rotate(-15deg) saturate(400%) brightness(50%)';

      // Draw the logo
      if (this.logoImage.complete) {
        const aspectRatio = this.logoImage.width / this.logoImage.height;
        const width = size;
        const height = size / aspectRatio;

        this.ctx.drawImage(
          this.logoImage,
          -width / 2,
          -height / 2,
          width,
          height
        );
      }

      this.ctx.restore();
    }

    private drawDot(
      x: number,
      y: number,
      size: number,
      rotation: number
    ): void {
      this.ctx.save();
      this.ctx.translate(x, y);

      const color = 'rgba(191, 87, 0, 0.3)';
      this.ctx.strokeStyle = color;
      this.ctx.fillStyle = color;
      this.ctx.lineWidth = 2;
      this.ctx.beginPath();

      this.ctx.arc(0, 0, size / 6, 0, Math.PI * 2);
      this.ctx.fill();

      this.ctx.restore();
    }

    private animate(): void {
      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);

      this.particles.forEach((particle: Particle) => {
        // Update position
        particle.x += particle.speedX;
        particle.y += particle.speedY;
        particle.rotation += particle.rotationSpeed;

        // Wrap around edges
        if (particle.x < 0) particle.x = this.canvas.width;
        if (particle.x > this.canvas.width) particle.x = 0;
        if (particle.y < 0) particle.y = this.canvas.height;
        if (particle.y > this.canvas.height) particle.y = 0;

        // Draw particle based on type
        if (particle.type === 'logo') {
          this.drawLogo(
            particle.x,
            particle.y,
            particle.size,
            particle.rotation
          );
        } else if (particle.type === 'plus') {
          this.drawPlus(
            particle.x,
            particle.y,
            particle.size,
            particle.rotation
          );
        } else {
          // dot
          this.drawDot(
            particle.x,
            particle.y,
            particle.size,
            particle.rotation
          );
        }
      });

      requestAnimationFrame(() => this.animate());
    }
  }

  // Initialize animation when page loads
  document.addEventListener('DOMContentLoaded', () => {
    new ParticleAnimation();
  });
</script>
