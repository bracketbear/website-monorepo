---
import Layout from '@/layouts/Layout.astro';
import ProjectCardList from '@/components/ProjectCardList.astro';
import Philosophy from '@/components/Philosophy.astro';
import About from '@/components/About.astro';
import WorkTimeline from '@/components/WorkTimeline.astro';
import '../styles/global.css';
---

<Layout>
  <!-- Brutalist Header Section -->
  <header class="bg-cream relative z-0 overflow-hidden py-24">
    <canvas
      id="particle-canvas"
      class="fixed top-0 left-0 -z-10 h-screen w-screen"></canvas>
    <div class="relative z-10 container mx-auto px-6">
      <div class="mb-16 max-w-4xl">
        <div class="brutalist-border bg-cream inline-block p-8">
          <h1 class="text-8xl font-black tracking-tighter text-black uppercase">
            Bracket<br />Bear
          </h1>
        </div>
        <p class="mt-8 text-2xl font-bold tracking-tight text-black uppercase">
          Software Engineer.<br />Problem Solver.<br />Creative Developer.
        </p>
      </div>
      <!-- Availability Announcement -->
      <div class="absolute top-24 right-6 w-96">
        <div
          class="availability-box brutalist-border rotate-2 transform bg-black p-6"
        >
          <h2
            class="text-cream mb-2 text-4xl font-black tracking-tight uppercase"
          >
            Available Now
          </h2>
          <p class="text-cream mb-4 text-xl font-bold">
            Open to <span class="bg-cream px-2 py-1 text-black">full-time</span>
            and <span class="bg-cream px-2 py-1 text-black">contract</span> roles.<br
            />
            Let's build something amazing together.
          </p>
          <a
            href="mailto:contact@bracketbear.com"
            class="brutalist-border bg-cream inline-block px-6 py-3 text-lg font-black text-black transition-transform hover:scale-105"
          >
            Let's Talk â†’
          </a>
        </div>
      </div>
    </div>
    <!-- Brutalist background elements -->
    <div class="absolute top-0 left-0 h-full w-full">
      <div
        class="bg-coral absolute top-20 left-20 h-32 w-32 rounded-full opacity-20"
      >
      </div>
      <div
        class="bg-coral absolute top-40 right-40 h-48 w-48 rounded-full opacity-20"
      >
      </div>
    </div>
  </header>

  <main class="bg-cream">
    <!-- About Section -->
    <section id="about" class="relative overflow-hidden py-24">
      <div class="relative z-10 container mx-auto px-6">
        <About />
      </div>
      <div class="bg-coral absolute top-0 right-0 h-full w-1/2 opacity-5"></div>
    </section>

    <!-- Philosophy Section -->
    <section id="philosophy" class="relative py-24">
      <div class="relative z-10 container mx-auto px-6">
        <Philosophy />
      </div>
      <div class="bg-coral absolute top-0 left-0 h-full w-1/2 opacity-5"></div>
    </section>

    <!-- Projects Section -->
    <section id="projects" class="relative py-24">
      <div class="relative z-10 container mx-auto px-6">
        <h2
          class="brutalist-border bg-cream mb-16 inline-block p-6 text-5xl font-black tracking-tight text-black uppercase"
        >
          Featured Projects
        </h2>
        <div class="brutalist-border bg-cream p-8">
          <div class="grid gap-8 md:grid-cols-2">
            <div>
              <h3
                class="text-coral mb-4 text-3xl font-black tracking-tight uppercase"
              >
                Project Showcase
              </h3>
              <p class="text-xl font-bold text-black">
                Here are some of the projects I've been lucky enough to work on.
              </p>
            </div>
            <ProjectCardList />
          </div>
        </div>
      </div>
    </section>

    <!-- Work History Section -->
    <section id="history" class="relative overflow-hidden py-24">
      <div class="relative z-10 container mx-auto px-6">
        <WorkTimeline />
      </div>
      <div class="bg-coral absolute right-0 bottom-0 h-1/2 w-full opacity-5">
      </div>
    </section>
  </main>
</Layout>

<style>
  @keyframes gradient-shift {
    0% {
      background-position: 0% 50%;
    }
    50% {
      background-position: 100% 50%;
    }
    100% {
      background-position: 0% 50%;
    }
  }

  .bg-gradient-animate {
    background-size: 200% 200%;
    animation: gradient-shift 15s ease infinite;
  }

  @keyframes shake {
    0%,
    100% {
      transform: rotate(2deg) translate(0, 0) scale(1);
    }
    25% {
      transform: rotate(3deg) translate(-2px, -2px) scale(1.02);
    }
    50% {
      transform: rotate(1deg) translate(2px, 2px) scale(1.05);
    }
    75% {
      transform: rotate(3deg) translate(-2px, 2px) scale(1.02);
    }
  }

  .shake-animation {
    animation: shake 0.5s ease-in-out;
    transform-style: preserve-3d;
    perspective: 1000px;
  }

  .availability-box {
    transform-style: preserve-3d;
    transition: transform 0.3s ease;
  }
</style>

<script>
  interface Particle {
    x: number;
    y: number;
    size: number;
    speedX: number;
    speedY: number;
    rotation: number;
    rotationSpeed: number;
    type: 'plus' | 'logo';
  }

  class ParticleAnimation {
    private canvas: HTMLCanvasElement;
    private ctx: CanvasRenderingContext2D;
    private particles: Particle[];
    private particleCount: number;
    private logoImage: HTMLImageElement;
    private announcementBox: HTMLElement | null;

    constructor() {
      this.canvas = document.getElementById(
        'particle-canvas'
      ) as HTMLCanvasElement;
      this.ctx = this.canvas.getContext('2d') as CanvasRenderingContext2D;
      this.particles = [];
      this.particleCount = 50;
      this.logoImage = new Image();
      this.logoImage.src = '/favicon.svg';
      this.announcementBox = document.querySelector('.availability-box');

      this.init();
      this.animate();
      this.startShakeAnimation();
    }

    private startShakeAnimation(): void {
      if (!this.announcementBox) return;

      const shakeInterval = () => {
        this.announcementBox?.classList.add('shake-animation');
        setTimeout(() => {
          this.announcementBox?.classList.remove('shake-animation');
        }, 500);
      };

      // Initial shake
      setTimeout(shakeInterval, 2000);

      // Repeat every 8-12 seconds
      const repeatShake = () => {
        const randomDelay = Math.floor(Math.random() * 4000) + 8000; // 8-12 seconds
        setTimeout(() => {
          shakeInterval();
          repeatShake();
        }, randomDelay);
      };

      repeatShake();
    }

    private init(): void {
      // Set canvas size
      const resize = (): void => {
        const dpr = window.devicePixelRatio || 1;
        this.canvas.width = this.canvas.offsetWidth * dpr;
        this.canvas.height = this.canvas.offsetHeight * dpr;
        this.ctx.scale(dpr, dpr);
      };

      window.addEventListener('resize', resize);
      resize();

      // Create initial particles
      for (let i = 0; i < this.particleCount; i++) {
        this.particles.push(this.createParticle());
      }
    }

    private createParticle(): Particle {
      return {
        x: Math.random() * this.canvas.width,
        y: Math.random() * this.canvas.height,
        size: Math.random() * 20 + 10,
        speedX: Math.random() * 2 - 1,
        speedY: Math.random() * 2 - 1,
        rotation: Math.random() * Math.PI * 2,
        rotationSpeed: (Math.random() - 0.5) * 0.02,
        type: Math.random() < 0.2 ? 'logo' : 'plus',
      };
    }

    private drawPlus(
      x: number,
      y: number,
      size: number,
      rotation: number
    ): void {
      this.ctx.save();
      this.ctx.translate(x, y);
      this.ctx.rotate(rotation);

      this.ctx.strokeStyle = '#000';
      this.ctx.lineWidth = 2;
      this.ctx.beginPath();

      // Horizontal line
      this.ctx.moveTo(-size / 2, 0);
      this.ctx.lineTo(size / 2, 0);

      // Vertical line
      this.ctx.moveTo(0, -size / 2);
      this.ctx.lineTo(0, size / 2);

      this.ctx.stroke();
      this.ctx.restore();
    }

    private drawLogo(
      x: number,
      y: number,
      size: number,
      rotation: number
    ): void {
      this.ctx.save();
      this.ctx.translate(x, y);
      this.ctx.rotate(rotation);

      // Draw the logo
      if (this.logoImage.complete) {
        const aspectRatio = this.logoImage.width / this.logoImage.height;
        const width = size;
        const height = size / aspectRatio;

        this.ctx.drawImage(
          this.logoImage,
          -width / 2,
          -height / 2,
          width,
          height
        );
      }

      this.ctx.restore();
    }

    private animate(): void {
      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);

      this.particles.forEach((particle: Particle) => {
        // Update position
        particle.x += particle.speedX;
        particle.y += particle.speedY;
        particle.rotation += particle.rotationSpeed;

        // Wrap around edges
        if (particle.x < 0) particle.x = this.canvas.width;
        if (particle.x > this.canvas.width) particle.x = 0;
        if (particle.y < 0) particle.y = this.canvas.height;
        if (particle.y > this.canvas.height) particle.y = 0;

        // Draw particle based on type
        if (particle.type === 'logo') {
          this.drawLogo(
            particle.x,
            particle.y,
            particle.size,
            particle.rotation
          );
        } else {
          this.drawPlus(
            particle.x,
            particle.y,
            particle.size,
            particle.rotation
          );
        }
      });

      requestAnimationFrame(() => this.animate());
    }
  }

  // Initialize animation when page loads
  document.addEventListener('DOMContentLoaded', () => {
    new ParticleAnimation();
  });
</script>
