---
import Layout from '../layouts/Layout.astro';
import '@/styles/forms.css';
import {
  Input,
  Textarea,
  Button,
} from '../../../../packages/ui-kit/dist/astro';
---

<Layout title="Contact Us" hideContactForm={true}>
  <div class="bg-background relative min-h-[calc(100vh-4rem)] overflow-hidden">
    <canvas
      id="particle-canvas"
      class="fixed top-0 left-0 -z-10 h-screen w-screen"></canvas>

    <div class="relative z-10 container mx-auto px-6 py-24">
      <div class="mx-auto max-w-4xl">
        <!-- Brutalist Header -->
        <div class="mb-16">
          <div
            class="brutalist-border bg-background inline-block transform p-8 transition-transform hover:rotate-1"
          >
            <h1
              class="text-foreground text-7xl font-black tracking-tighter uppercase"
            >
              Let's Build<br />Something
            </h1>
          </div>
          <div class="mt-8">
            <p
              class="text-foreground text-2xl font-bold tracking-tight uppercase"
            >
              Portland, OR â€¢ Pacific Time â€¢ Open to Chat
            </p>
          </div>
        </div>

        <!-- Contact Form Section -->
        <div class="grid gap-8 md:grid-cols-12">
          <!-- Info Box -->
          <div class="md:col-span-4">
            <div
              class="brutalist-border bg-foreground text-background -rotate-2 transform p-6 transition-transform hover:rotate-0"
            >
              <h2 class="mb-4 text-2xl font-black tracking-tight uppercase">
                Quick Links
              </h2>
              <ul class="space-y-4">
                <li>
                  <a
                    href="mailto:contact@bracketbear.com"
                    class="text-background hover:text-background/80 flex items-center gap-2 font-bold"
                  >
                    Email
                  </a>
                </li>
                <li>
                  <a
                    href="https://github.com"
                    class="text-background hover:text-background/80 flex items-center gap-2 font-bold"
                  >
                    GitHub
                  </a>
                </li>
                <li>
                  <a
                    href="https://linkedin.com"
                    class="text-background hover:text-background/80 flex items-center gap-2 font-bold"
                  >
                    LinkedIn
                  </a>
                </li>
              </ul>
            </div>
          </div>

          <!-- Contact Form -->
          <div class="md:col-span-8">
            <div class="brutalist-border bg-background p-8">
              <form
                name="contact-form"
                method="POST"
                data-netlify="true"
                class="grid gap-6"
                netlify-honeypot="bot-field"
              >
                <input type="hidden" name="form-name" value="contact-form" />
                <p class="hidden">
                  <label>
                    Don't fill this out if you're human: <input
                      name="bot-field"
                    />
                  </label>
                </p>

                <div class="grid gap-6 md:grid-cols-2">
                  <Input
                    name="name"
                    label="Name"
                    placeholder="Your name"
                    required
                  />
                  <Input
                    name="email"
                    type="email"
                    label="Email"
                    placeholder="your@email.com"
                    required
                  />
                </div>

                <Input
                  name="subject"
                  label="Subject"
                  placeholder="What's on your mind?"
                  required
                />

                <Textarea
                  name="message"
                  label="Message"
                  placeholder="Tell me about your project or idea. Keep Portland weird! ðŸŒ²"
                  required
                  rows={8}
                />

                <div class="mt-4 flex flex-col items-center gap-4">
                  <Button type="submit" size="lg"> Send Message â†’ </Button>
                  <small class="text-foreground/70 font-bold">
                    * Required fields
                  </small>
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  // Import the ParticleAnimation class from index.astro
  interface Particle {
    x: number;
    y: number;
    size: number;
    speedX: number;
    speedY: number;
    rotation: number;
    rotationSpeed: number;
    type: 'plus' | 'logo' | 'dot';
  }

  class ParticleAnimation {
    private canvas: HTMLCanvasElement;
    private ctx: CanvasRenderingContext2D;
    private particles: Particle[];
    private particleCount: number;
    private logoImage: HTMLImageElement;

    constructor() {
      this.canvas = document.getElementById(
        'particle-canvas'
      ) as HTMLCanvasElement;
      this.ctx = this.canvas.getContext('2d') as CanvasRenderingContext2D;
      this.particles = [];
      this.particleCount = 50;
      this.logoImage = new Image();
      this.logoImage.src = '/favicon.svg';

      this.init();
      this.animate();
    }

    private init(): void {
      const resize = (): void => {
        const dpr = window.devicePixelRatio || 1;
        this.canvas.width = this.canvas.offsetWidth * dpr;
        this.canvas.height = this.canvas.offsetHeight * dpr;
        this.ctx.scale(dpr, dpr);
      };

      window.addEventListener('resize', resize);
      resize();

      for (let i = 0; i < this.particleCount; i++) {
        this.particles.push(this.createParticle());
      }
    }

    private createParticle(): Particle {
      return {
        x: Math.random() * this.canvas.width,
        y: Math.random() * this.canvas.height,
        size: Math.random() * 20 + 10,
        speedX: Math.random() * 2 - 1,
        speedY: Math.random() * 2 - 1,
        rotation: Math.random() * Math.PI * 2,
        rotationSpeed: (Math.random() - 0.5) * 0.02,
        type:
          Math.random() < 0.2 ? 'logo' : Math.random() < 0.5 ? 'plus' : 'dot',
      };
    }

    private drawPlus(
      x: number,
      y: number,
      size: number,
      rotation: number
    ): void {
      this.ctx.save();
      this.ctx.translate(x, y);
      this.ctx.rotate(rotation);

      this.ctx.strokeStyle = 'rgba(191, 87, 0, 0.3)';
      this.ctx.lineWidth = 2;
      this.ctx.beginPath();

      this.ctx.moveTo(-size / 2, 0);
      this.ctx.lineTo(size / 2, 0);
      this.ctx.moveTo(0, -size / 2);
      this.ctx.lineTo(0, size / 2);

      this.ctx.stroke();
      this.ctx.restore();
    }

    private drawLogo(
      x: number,
      y: number,
      size: number,
      rotation: number
    ): void {
      this.ctx.save();
      this.ctx.translate(x, y);
      this.ctx.rotate(rotation);

      this.ctx.globalAlpha = 0.3;
      this.ctx.filter =
        'sepia(100%) hue-rotate(-15deg) saturate(400%) brightness(50%)';

      if (this.logoImage.complete) {
        const aspectRatio = this.logoImage.width / this.logoImage.height;
        const width = size;
        const height = size / aspectRatio;
        this.ctx.drawImage(
          this.logoImage,
          -width / 2,
          -height / 2,
          width,
          height
        );
      }

      this.ctx.restore();
    }

    private drawDot(x: number, y: number, size: number): void {
      this.ctx.save();
      this.ctx.translate(x, y);

      const color = 'rgba(191, 87, 0, 0.3)';
      this.ctx.strokeStyle = color;
      this.ctx.fillStyle = color;
      this.ctx.lineWidth = 2;
      this.ctx.beginPath();

      this.ctx.arc(0, 0, size / 6, 0, Math.PI * 2);
      this.ctx.fill();

      this.ctx.restore();
    }

    private animate(): void {
      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);

      this.particles.forEach((particle: Particle) => {
        particle.x += particle.speedX;
        particle.y += particle.speedY;
        particle.rotation += particle.rotationSpeed;

        if (particle.x < 0) particle.x = this.canvas.width;
        if (particle.x > this.canvas.width) particle.x = 0;
        if (particle.y < 0) particle.y = this.canvas.height;
        if (particle.y > this.canvas.height) particle.y = 0;

        if (particle.type === 'logo') {
          this.drawLogo(
            particle.x,
            particle.y,
            particle.size,
            particle.rotation
          );
        } else if (particle.type === 'plus') {
          this.drawPlus(
            particle.x,
            particle.y,
            particle.size,
            particle.rotation
          );
        } else {
          this.drawDot(particle.x, particle.y, particle.size);
        }
      });

      requestAnimationFrame(() => this.animate());
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    new ParticleAnimation();
  });
</script>
