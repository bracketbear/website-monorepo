---
interface Props {
  orientation?: "vertical" | "horizontal";
  flow?: "start" | "end" | "alternating";
}

const orientationValue = Astro.props.orientation ?? "vertical";
const flow = Astro.props.flow ?? "start"; // default to everything on the start side
---

<div class="@container">
  <ul
    class:list={[
      "timeline-progress text-accent-content relative flex list-none p-0",
      {
        "flex-row": orientationValue === "horizontal",
        "flex-col": orientationValue === "vertical",
        "timeline-horizontal": orientationValue === "horizontal",
        "timeline-vertical": orientationValue === "vertical",
        "timeline-start": flow === "start",
        "timeline-end": flow === "end",
        "timeline-alternating": flow === "alternating",
      },
      // Container query based gaps
      "gap-2 @xs:gap-3 @sm:gap-4 @md:gap-6 @lg:gap-8 @xl:gap-10",
    ]}
    data-flow={flow}
  >
    <slot />
  </ul>
</div>

<style>
  /* Define the middle size CSS variable - this is used by TimelineItem */
  :root {
    --timeline-middle-size: 1.5rem;
  }
</style>

<script>
  // Handle positioning of timeline items based on flow
  document.addEventListener("astro:page-load", () => {
    document
      .querySelectorAll(".timeline-vertical, .timeline-horizontal")
      .forEach((timeline) => {
        const flow = timeline.getAttribute("data-flow");
        const items = timeline.querySelectorAll("li");

        items.forEach((item, index) => {
          if (flow === "start") {
            item.classList.add("timeline-item-start");
          } else if (flow === "end") {
            item.classList.add("timeline-item-end");
          } else if (flow === "alternating") {
            item.classList.add(
              index % 2 === 0 ? "timeline-item-start" : "timeline-item-end"
            );
          }
        });
      });
  });

  // Remove the scroll-based timeline filling effect code
</script>
