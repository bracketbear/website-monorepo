---
import { getCollection } from 'astro:content';
import type { GetStaticPaths } from 'astro';
import { DetailBlock, SummaryBlock } from '@bracketbear/core';
import type { LabelValue } from '@bracketbear/core';
import { getProjectImageUrl } from '@bracketbear/astro-content';
import { getKeyedCollection } from '@/utils/content';
import { getBreadcrumbs } from '@/config/breadcrumbs';
import ContentLayout from '../../layouts/ContentLayout.astro';
import { Picture } from 'astro:assets';

export const getStaticPaths: GetStaticPaths = async () => {
  const workProjects = await getCollection('workProject');
  return workProjects.map((project) => ({
    params: { project: project.id },
  }));
};

const workJobs = await getCollection('workJobs');
const workSkills = await getCollection('workSkills');
const workProject = await getCollection('workProject');
const workCompanies = await getKeyedCollection('workCompany');
const projectCategories = await getCollection('workProjectCategory');

const workProjectItem = workProject.find(
  (project) => project.id === Astro.params.project
);

if (workProjectItem === undefined) {
  throw new Error(`Project not found: ${Astro.params.project}`);
}

// Get related data
const job = workJobs.find((job) => job.id === workProjectItem.data.job);
const category = projectCategories.find(
  (category) => category.id === workProjectItem.data.category
);
// Get skills in the order set in Keystatic
const projectSkills = (workProjectItem.data.skills ?? [])
  .map((skillId) => workSkills.find((s) => s.id === skillId))
  .filter(Boolean);

const companyTitle =
  job !== undefined ? workCompanies[job.data.company].data.title : 'Unknown';

const detailBlockContent: Partial<LabelValue>[] = [
  {
    label: 'Company',
    value: companyTitle,
  },
  {
    label: 'Role',
    value: job?.data.title,
  },
  {
    label: 'Technologies Used',
    value: projectSkills
      .map((skill) => skill?.data.title)
      .filter(Boolean)
      .join(', '),
  },
];

const breadcrumbs = getBreadcrumbs(
  {
    label: 'Projects',
    href: '/projects',
  },
  {
    label: workProjectItem.data.title,
    href: `/project/${workProjectItem.id}`,
  }
);

// Get cover image using the new getProjectImageUrl function
let coverImage: string | undefined;
if (workProjectItem.data.coverImage) {
  try {
    coverImage = getProjectImageUrl(
      workProjectItem.id,
      workProjectItem.data.coverImage
    );
  } catch (error) {
    console.warn(
      `Failed to load cover image for project ${workProjectItem.id}:`,
      error
    );
  }
}
---

<ContentLayout
  title={workProjectItem.data.title}
  breadcrumbs={breadcrumbs}
  contentWidth="narrow"
>
  <!-- Title Pills -->
  <span slot="title-pills" class="pill pill-category">
    {category?.data.title}
  </span>
  {
    workProjectItem.data.isFeatured && (
      <span slot="title-pills" class="pill pill-featured">
        Featured Project
      </span>
    )
  }

  <!-- Cover Image -->
  <div
    slot="cover-image"
    class="bg-brand-dark border-brand-orange flex aspect-[4/3] w-80 max-w-2xl overflow-hidden rounded-xl border-2"
  >
    {
      coverImage ? (
        <Picture
          src={coverImage}
          alt={workProjectItem.data.title + ' cover'}
          class="h-full w-full object-cover"
          width={1000}
          height={1000}
          formats={['avif', 'webp']}
          layout="full-width"
          fit="cover"
        />
      ) : (
        <span class="text-brand-yellow font-mono text-xs opacity-60">
          [No Cover Image]
        </span>
      )
    }
  </div>

  <!-- Summary -->
  {
    workProjectItem.data.summary && (
      <SummaryBlock slot="summary" content={workProjectItem.data.summary} />
    )
  }

  <!-- Detail Blocks -->
  {
    detailBlockContent.map((detail) => (
      <DetailBlock
        slot="detail-blocks"
        label={detail.label || ''}
        value={detail.value || ''}
      />
    ))
  }

  <!-- Main Content Grid -->
  <div class="w-full gap-12">
    <!-- Main Content -->
    <div class="mb-12 flex flex-col gap-12">
      <!-- About This Project -->
      {
        workProjectItem.data.description?.trim() !== '' && (
          <div class="styled-section">
            <h2 class="font-heading mb-4 text-3xl font-black tracking-tight uppercase">
              About This Project
            </h2>
            <p class="text-foreground text-lg leading-relaxed font-medium">
              {workProjectItem.data.description}
            </p>
          </div>
        )
      }
      <!-- Challenges & Solutions -->
      {
        workProjectItem.data.challengesAndSolutions?.trim() !== '' && (
          <div class="styled-section">
            <h2 class="font-heading mb-4 text-3xl font-black tracking-tight uppercase">
              Challenges & Solutions
            </h2>
            <p class="text-lg leading-relaxed font-medium text-black">
              {workProjectItem.data.challengesAndSolutions}
            </p>
          </div>
        )
      }
      <!-- Results -->
      {
        workProjectItem.data.resultsAchieved?.trim() !== '' && (
          <div class="styled-section">
            <h2 class="font-heading mb-4 text-3xl font-black tracking-tight uppercase">
              Results Achieved
            </h2>
            <p class="text-lg leading-relaxed font-medium text-black">
              {workProjectItem.data.resultsAchieved}
            </p>
          </div>
        )
      }
    </div>
  </div>
</ContentLayout>
