---
import { getCollection } from 'astro:content';
import type { GetStaticPaths } from 'astro';
import { getProjectImageUrl } from '@bracketbear/astro-content';
import { getKeyedCollection } from '@/utils/content';
import { getBreadcrumbs } from '@/config/breadcrumbs';
import { generatePortfolioMetaTitle } from '@/config/meta-title';
import ProjectHeaderLayout from '@/layouts/ProjectHeaderLayout.astro';
import Section from '@/components/Section.astro';

import { ImageGallery, Pill } from '@bracketbear/bear-ui-react';

// Type definitions
interface SkillData {
  data: {
    title: string;
  };
}

export const getStaticPaths: GetStaticPaths = async () => {
  const workProjects = await getCollection('workProject');
  return workProjects.map((project) => ({
    params: { project: project.id },
  }));
};

// Get all collections
const workJobs = await getCollection('workJobs');
const workSkills = await getCollection('workSkills');
const workProject = await getCollection('workProject');
const workCompanies = await getKeyedCollection('workCompany');
const projectCategories = await getCollection('workProjectCategory');
const portfolioProjectPageEntries = await getCollection('portfolioProjectPage');

// Get the project page singleton
const projectPage = portfolioProjectPageEntries[0];

// Get the current project
const workProjectItem = workProject.find(
  (project) => project.id === Astro.params.project
);

if (workProjectItem === undefined) {
  throw new Error(`Project not found: ${Astro.params.project}`);
}

// Get related data
const job = workJobs.find((job) => job.id === workProjectItem.data.job);
const category = projectCategories.find(
  (category) => category.id === workProjectItem.data.category
);
const projectSkills = (workProjectItem.data.skills ?? [])
  .map((skillId: string) => workSkills.find((s) => s.id === skillId))
  .filter((skill: any): skill is SkillData => skill !== undefined);

const companyTitle =
  job !== undefined ? workCompanies[job.data.company].data.title : 'Unknown';

// Generate dynamic metadata
const _metaTitle = generatePortfolioMetaTitle(workProjectItem.data.title);
const metaDescription =
  workProjectItem.data.summary ||
  workProjectItem.data.description?.slice(0, 160) ||
  `Learn about ${workProjectItem.data.title} - a project by Harrison Callahan`;

// Get cover image (unused for now)
let _coverImage: string | undefined;
if (workProjectItem.data.coverImage) {
  try {
    _coverImage = getProjectImageUrl(
      workProjectItem.id,
      workProjectItem.data.coverImage
    );
  } catch (error) {
    console.warn(
      `Failed to load cover image for project ${workProjectItem.id}:`,
      error
    );
  }
}

// Use project-specific CTA if available, otherwise use CMS default
const ctaText =
  workProjectItem.data.cta?.text || projectPage?.data.defaultCTA?.text;
const ctaButtonText =
  workProjectItem.data.cta?.buttonText ||
  projectPage?.data.defaultCTA?.buttonText ||
  'Get in Touch';
const ctaButtonLink =
  workProjectItem.data.cta?.buttonLink ||
  projectPage?.data.defaultCTA?.buttonLink ||
  '/contact';

const breadcrumbs = getBreadcrumbs(
  {
    label: 'Projects',
    href: '/projects',
  },
  {
    label: workProjectItem.data.title,
    href: `/project/${workProjectItem.id}`,
  }
);

// Story-first layout data preparation
const {
  title,
  oneLiner,
  teaser,
  summary,
  a11y,

  problem,
  description,
  scope,
  decisions,
  challengesAndSolutions,
  outcome,
  resultsAchieved,
  notes,
  status,
  links,
  impactTags,
  skills,
} = workProjectItem.data;

// Fallback logic for story-first layout
const subline = oneLiner ?? teaser?.headline ?? teaser?.subline ?? summary;
const heroAlt = a11y?.coverAlt ?? title;

// Define stats data
const stats = [
  ...(status
    ? [
        {
          label: projectPage?.data.sectionHeadings?.status || 'Status',
          value: status,
        },
      ]
    : []),
  ...(job !== undefined
    ? [
        {
          label: projectPage?.data.sectionHeadings?.company || 'Company',
          value: companyTitle,
        },
      ]
    : []),
  {
    label: projectPage?.data.sectionHeadings?.duration || 'Duration',
    value: workProjectItem.data.duration,
  },
  ...(job !== undefined
    ? [
        {
          label: projectPage?.data.sectionHeadings?.role || 'Role',
          value: job.data.title,
        },
      ]
    : []),
];
---

<ProjectHeaderLayout
  pageTitle={workProjectItem.data.title}
  title={workProjectItem.data.title}
  subtitle={category?.data.title}
  description={subline}
  coverImage={_coverImage}
  coverAlt={heroAlt}
  breadcrumbs={breadcrumbs}
  stats={stats}
  contactCTA={{
    text: ctaText,
    buttonText: ctaButtonText,
    buttonLink: ctaButtonLink,
  }}
  metaDescription={metaDescription}
  currentPage="project"
>
  <!-- Story-First Content Layout -->
  <section class="px-content mb-8">
    <div class="container mx-auto">
      <div class="mx-auto max-w-4xl">
        <div class="space-y-16">
          {/* Stack */}
          {
            Array.isArray(skills) && skills.length > 0 && (
              <Section title="Tech Stack">
                <div class="flex flex-wrap gap-2">
                  {projectSkills.map((skill: SkillData) => (
                    <Pill variant="glass-frosted" size="sm">
                      {skill.data.title}
                    </Pill>
                  ))}
                </div>
              </Section>
            )
          }

          {/* Problem */}
          {
            (problem || description) && (
              <Section title="Problem">
                <div class="prose prose-lg prose-headings:text-text-primary prose-p:text-text-primary/90 text-text-primary/90">
                  {problem ?? description}
                </div>
              </Section>
            )
          }

          {/* My role */}
          {
            Array.isArray(scope) && scope.length > 0 && (
              <Section title="My role">
                <ul class="prose prose-lg prose-headings:text-text-primary prose-p:text-text-primary/90 text-text-primary/90 list-disc pl-6">
                  {scope.map((item: string) => (
                    <li>{item}</li>
                  ))}
                </ul>
              </Section>
            )
          }

          {/* My Contributions */}
          {
            (Array.isArray(decisions) && decisions.length) ||
            !!challengesAndSolutions ? (
              <Section title="My Contributions">
                {Array.isArray(decisions) && decisions.length ? (
                  <ul class="prose prose-lg prose-headings:text-text-primary prose-p:text-text-primary/90 text-text-primary/90 list-disc pl-6">
                    {decisions.map((d: string) => (
                      <li class="mb-2">{d}</li>
                    ))}
                  </ul>
                ) : (
                  <div class="prose prose-lg prose-headings:text-text-primary prose-p:text-text-primary/90 text-text-primary/90">
                    {challengesAndSolutions}
                  </div>
                )}
              </Section>
            ) : null
          }

          {/* How it ended */}
          {
            (outcome || resultsAchieved) && (
              <Section title="How it ended">
                <div class="prose prose-lg prose-headings:text-text-primary prose-p:text-text-primary/90 text-text-primary/90">
                  {outcome ?? resultsAchieved}
                </div>
              </Section>
            )
          }

          {/* Notes / behind the build */}
          {
            notes && (
              <Section title="Notes">
                <div class="prose prose-lg prose-headings:text-text-primary prose-p:text-text-primary/90 text-text-primary/90">
                  {notes}
                </div>
              </Section>
            )
          }

          {/* Gallery */}
          {
            Array.isArray(workProjectItem.data.media) &&
              workProjectItem.data.media.length > 0 && (
                <Section
                  title={
                    projectPage?.data.sectionHeadings?.gallery || 'Gallery'
                  }
                >
                  {(() => {
                    // Process media items to create gallery images
                    const galleryImages = workProjectItem.data.media
                      .filter((item: any) => item?.image)
                      .map((item: any) => {
                        let imageUrl: string;
                        try {
                          imageUrl = getProjectImageUrl(
                            workProjectItem.id,
                            item.image
                          );
                        } catch (error) {
                          console.warn(
                            `Failed to load media image: ${item.image}`,
                            error
                          );
                          return null;
                        }

                        return {
                          src: imageUrl,
                          alt:
                            item.alt ??
                            item.caption ??
                            workProjectItem.data.title,
                          caption: item.caption,
                        };
                      })
                      .filter(Boolean);

                    if (!galleryImages || galleryImages.length === 0) {
                      return null;
                    }

                    return (
                      <ImageGallery
                        images={galleryImages}
                        columns={3}
                        showCaptions={true}
                        client:load
                      />
                    );
                  })()}
                </Section>
              )
          }

          {/* Links */}
          {
            Array.isArray(links) && links.length > 0 && (
              <Section title="Links">
                <ul class="prose prose-lg prose-headings:text-text-primary prose-p:text-text-primary/90 text-text-primary/90 list-disc pl-6">
                  {links.map((l: { href: string; label: string }) => (
                    <li>
                      <a
                        href={l.href}
                        target="_blank"
                        rel="noopener"
                        class="text-brand-orange hover:text-brand-orange/80 underline transition-colors hover:no-underline"
                      >
                        {l.label}
                      </a>
                    </li>
                  ))}
                </ul>
              </Section>
            )
          }

          {/* Impact */}
          {
            Array.isArray(impactTags) && impactTags.length > 0 && (
              <Section title="Impact">
                <div class="grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-3">
                  {impactTags.map((tag: string) => (
                    <div class="glass-bg-frosted glass-border-frosted glass-shadow flex items-center gap-3 rounded-lg border p-4 transition-all">
                      <div class="bg-brand-orange flex h-8 w-8 items-center justify-center rounded-full">
                        <svg
                          class="h-4 w-4 text-white"
                          fill="none"
                          stroke="currentColor"
                          viewBox="0 0 24 24"
                        >
                          <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M13 10V3L4 14h7v7l9-11h-7z"
                          />
                        </svg>
                      </div>
                      <span class="text-text-primary font-heading text-sm font-semibold tracking-wide uppercase">
                        {tag}
                      </span>
                    </div>
                  ))}
                </div>
              </Section>
            )
          }
        </div>
      </div>
    </div>
  </section>
</ProjectHeaderLayout>
