---
import { type Breadcrumb } from '@bracketbear/core';
import { getCollection } from 'astro:content';
import { getAboutBreadcrumbs } from '@/config/breadcrumbs';
import HeroLayout from '@/layouts/HeroLayout.astro';
import { marked } from 'marked';

const breadcrumbs: Breadcrumb[] = getAboutBreadcrumbs();

// Get the about page singleton (following the same pattern as index.astro)
const aboutPageEntries = await getCollection('portfolioAboutPage');
const aboutPage = aboutPageEntries[0]; // Singletons have only one entry
---

<HeroLayout
  pageTitle="About Me"
  title={aboutPage.data.title}
  subtitle={aboutPage.data.subtitle}
  stats={aboutPage.data.stats}
  breadcrumbs={breadcrumbs}
  animationPreset="curious-particle-network"
  contactCTA={aboutPage.data.contactCTA}
>
  <!-- Narrative Section -->
  {
    aboutPage?.data?.narrative && (
      <section class="mb-40">
        <div class="container mx-auto text-center">
          <h2 class="font-heading mb-6 text-4xl tracking-tight text-white">
            {aboutPage.data.narrative.title}
          </h2>
        </div>
        <div class="container mx-auto mt-8">
          <div class="prose-2xl mx-auto max-w-prose text-white/90">
            <Fragment
              set:html={marked.parse(aboutPage.data.narrative.content)}
            />
          </div>
        </div>
        {/* Stats row below narrative, if present */}
        {aboutPage?.data?.stats && aboutPage.data.stats.length > 0 && (
          <div class="mx-auto mt-40 max-w-7xl px-6 lg:px-8">
            <dl class="grid grid-cols-1 gap-x-8 gap-y-16 text-center sm:grid-cols-2 lg:grid-cols-4">
              {aboutPage.data.stats.map((stat: any) => (
                <div class="mx-auto flex max-w-xs flex-col gap-y-4">
                  <dt class="text-base leading-7 text-white/60">
                    {stat.label}
                  </dt>
                  <dd class="order-first text-3xl font-bold tracking-tight text-white sm:text-5xl">
                    {stat.value}
                  </dd>
                  {stat.description && (
                    <dd class="text-base leading-7 text-white/60">
                      {stat.description}
                    </dd>
                  )}
                </div>
              ))}
            </dl>
          </div>
        )}
      </section>
    )
  }

  <!-- Values Section -->
  {
    aboutPage?.data?.values && (
      <div class="mb-40">
        <div class="mx-auto max-w-4xl text-center">
          <h2 class="font-heading mb-4 text-4xl tracking-tight text-white">
            {aboutPage.data.values.title}
          </h2>
          {aboutPage.data.values.description && (
            <p class="mb-12 text-xl leading-relaxed text-white/80">
              {aboutPage.data.values.description}
            </p>
          )}
        </div>
        <div class="mx-auto max-w-7xl px-6 lg:px-8">
          <div class="grid grid-cols-1 gap-8 md:grid-cols-2 lg:grid-cols-3">
            {aboutPage.data.values.items.map((value: any) => (
              <div class="text-left">
                <h3 class="font-heading mb-4 text-xl font-semibold text-white">
                  {value.title}
                </h3>
                <p class="text-lg leading-relaxed text-white/80">
                  {value.description}
                </p>
              </div>
            ))}
          </div>
        </div>
      </div>
    )
  }

  <!-- Skills Section -->
  {
    aboutPage?.data?.skills && (
      <div class="mb-40">
        <div class="mx-auto max-w-4xl">
          <h2 class="font-heading mb-8 text-center text-4xl tracking-tight text-white">
            Skills & Expertise
          </h2>
          <div class="grid grid-cols-1 gap-12 md:grid-cols-3">
            {/* Core Strengths */}
            {aboutPage.data.skills.coreStrengths.length > 0 && (
              <div>
                <h3 class="font-heading mb-6 text-2xl tracking-tight text-white">
                  Core Strengths
                </h3>
                <ul class="space-y-3 text-lg font-medium text-white/90">
                  {aboutPage.data.skills.coreStrengths.map(
                    (strength: string) => (
                      <li class="flex items-start gap-3">
                        <span class="mt-2 text-sm text-white">•</span>
                        <span>{strength}</span>
                      </li>
                    )
                  )}
                </ul>
              </div>
            )}

            {/* Technical Expertise */}
            {aboutPage.data.skills.technicalExpertise.length > 0 && (
              <div>
                <h3 class="font-heading mb-6 text-2xl tracking-tight text-white">
                  Technical Expertise
                </h3>
                <ul class="space-y-3 text-lg font-medium text-white/90">
                  {aboutPage.data.skills.technicalExpertise.map(
                    (skill: string) => (
                      <li class="flex items-start gap-3">
                        <span class="mt-2 text-sm text-white">•</span>
                        <span>{skill}</span>
                      </li>
                    )
                  )}
                </ul>
              </div>
            )}

            {/* Beyond Tech */}
            {aboutPage.data.skills.beyondTech.length > 0 && (
              <div>
                <h3 class="font-heading mb-6 text-2xl tracking-tight text-white">
                  Beyond Tech
                </h3>
                <ul class="space-y-3 text-lg font-medium text-white/90">
                  {aboutPage.data.skills.beyondTech.map((skill: string) => (
                    <li class="flex items-start gap-3">
                      <span class="mt-2 text-sm text-white">•</span>
                      <span>{skill}</span>
                    </li>
                  ))}
                </ul>
              </div>
            )}
          </div>
        </div>
      </div>
    )
  }

  <!-- Fun Facts Section -->
  {
    aboutPage?.data?.funFacts && aboutPage.data.funFacts.length > 0 && (
      <div class="mb-40">
        <div class="mx-auto max-w-4xl text-center">
          <h2 class="font-heading mb-8 text-4xl tracking-tight text-white">
            Fun Facts
          </h2>
          <ul class="space-y-4 text-xl font-medium text-white/90">
            {aboutPage.data.funFacts.map((fact: string) => (
              <li class="flex items-center justify-center gap-3">
                <span class="text-sm text-white">•</span>
                <span>{fact}</span>
              </li>
            ))}
          </ul>
        </div>
      </div>
    )
  }
</HeroLayout>

<style>
  /* Custom ordered list styling */
  ol {
    counter-reset: item;
  }

  ol > li {
    counter-increment: item;
  }

  ol > li::marker {
    content: counter(item, decimal-leading-zero);
    font-weight: bold;
    color: var(--color-white);
  }
</style>
