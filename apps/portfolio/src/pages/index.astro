---
import { getCollection } from 'astro:content';
import { AstroButton } from '@bracketbear/core/astro';
import { SkillPill } from '@bracketbear/core/react';
import HomeLayout from '@/layouts/HomeLayout.astro';
import { ContactForm } from '@/components/ContactForm';
import ProjectCard from '@/components/ProjectCard';
import type {
  WorkJobEntry,
  WorkSkillEntry,
  WorkProjectEntry,
  WorkCompanyEntry,
} from '@bracketbear/astro-content';
import { HeroSection } from '@/components/HeroSection';
import FeaturedProjectsWaveBG from '@/components/FeaturedProjectsWaveBG';
import SkillsTicker from '@/components/SkillsTicker';
import { marked } from 'marked';
import { MeetFlateralusSection } from '@/components/MeetFlateralusSection';

// Get the index page singleton
const indexPageEntries = await getCollection('portfolioIndexPage');
const indexPage = indexPageEntries[0]; // Singletons have only one entry

// Get all work collections for relationship lookups
const workJobs: WorkJobEntry[] = await getCollection('workJobs');
const workSkills: WorkSkillEntry[] = await getCollection('workSkills');
const workProjects: WorkProjectEntry[] = await getCollection('workProject');
const workCompanies: WorkCompanyEntry[] = await getCollection('workCompany');

// Get recent experience based on CMS configuration
let recentJobs: WorkJobEntry[] = [];

// If specific jobs are selected in CMS, use those in the exact order specified
if (
  indexPage.data.recentExperience.selectedJobs &&
  indexPage.data.recentExperience.selectedJobs.length > 0
) {
  // Map the selected job IDs to actual job entries, preserving the order from CMS
  recentJobs = indexPage.data.recentExperience.selectedJobs
    .map((jobId: string) =>
      workJobs.find((job: WorkJobEntry) => job.id === jobId)
    )
    .filter((job: unknown): job is WorkJobEntry => job !== undefined);
} else {
  // Fallback to sorting by date if no specific jobs are selected
  recentJobs = workJobs.sort(
    (a, b) => b.data.startDate.getTime() - a.data.startDate.getTime()
  );
}

// Limit to max display count
recentJobs = recentJobs.slice(0, indexPage.data.recentExperience.maxDisplay);

// Get featured projects based on CMS configuration
let featuredProjects: WorkProjectEntry[] = [];

// If specific projects are selected in CMS, use those in the exact order specified
if (
  indexPage.data.featuredProjects.selectedProjects &&
  indexPage.data.featuredProjects.selectedProjects.length > 0
) {
  // Map the selected project IDs to actual project entries, preserving the order from CMS
  featuredProjects = indexPage.data.featuredProjects.selectedProjects
    .map((projectId: string) =>
      workProjects.find((project: WorkProjectEntry) => project.id === projectId)
    )
    .filter(
      (project: unknown): project is WorkProjectEntry => project !== undefined
    );
} else {
  // Fallback to filtering by featured flag if no specific projects are selected
  featuredProjects = workProjects.filter(
    (project: WorkProjectEntry) => project.data.isFeatured
  );
}

// Limit to max display count
featuredProjects = featuredProjects.slice(
  0,
  indexPage.data.featuredProjects.maxDisplay
);

// Get featured skills for the about section
let featuredSkills = workSkills.filter((skill) => skill.data.isFeatured);

// If specific skills are selected in CMS, use those instead
if (
  indexPage.data.about.featuredSkills &&
  indexPage.data.about.featuredSkills.length > 0
) {
  featuredSkills = workSkills.filter((skill) => {
    const isIncluded = indexPage.data.about.featuredSkills.includes(skill.id);
    return isIncluded;
  });
}

// Helper function to format dates correctly
function formatDate(date: Date): string {
  const adjustedDate = new Date(date);
  adjustedDate.setMonth(adjustedDate.getMonth() + 1);

  return adjustedDate.toLocaleDateString('en-US', {
    month: 'short',
    year: 'numeric',
  });
}

// Helper function to get company name from company key
function getCompanyName(
  companyKey: string,
  companies: WorkCompanyEntry[]
): string {
  const company = companies.find((c) => c.id === companyKey);
  return company?.data.title || companyKey;
}

// Helper function to parse markdown content
function parseMarkdown(content: string): string {
  return marked.parse(content) as string;
}
---

<HomeLayout
  title={indexPage.data.title}
  hideContactForm={indexPage.data.layout.hideContactForm}
  metaDescription={indexPage.data.metaDescription}
  currentPage="home"
>
  <!-- Hero Section with Particle Galaxy Background -->
  <HeroSection
    className="w-full"
    client:load
    preset="curious-particle-network"
    title={indexPage.data.title}
    subtitle={indexPage.data.subtitle}
    description={indexPage.data.hero?.description}
    showActions={true}
    accountForNavigation={true}
    accountForBreadcrumbs={false}
    isIndexPage={true}
  />

  <!-- What I Do Section -->
  {
    indexPage.data.layout.showAboutSection && (
      <section class="px-content py-12">
        <div class="container mx-auto">
          <div class="mx-auto max-w-4xl text-center">
            <h2 class="font-heading text-foreground mb-8 inline-block p-6 text-5xl font-black tracking-tight uppercase">
              {indexPage.data.about.title}
            </h2>
            <div class="card">
              {indexPage.data.about.content && (
                <div
                  class="prose prose-xl prose-headings:text-foreground prose-p:text-foreground/80 prose-strong:text-foreground prose-em:text-foreground/90 prose-ul:text-foreground/80 prose-ol:text-foreground/80 prose-li:text-foreground/80 max-w-none"
                  set:html={parseMarkdown(indexPage.data.about.content)}
                />
              )}
              {indexPage.data.about.showSkillsTicker && (
                <>
                  <h3 class="text-foreground mt-8 text-2xl font-bold">
                    Featured Skills:
                  </h3>
                  <SkillsTicker skills={featuredSkills} client:load />
                </>
              )}
            </div>
          </div>
        </div>
      </section>
    )
  }

  <!-- Featured Projects Section -->
  {
    indexPage.data.layout.showFeaturedProjects && (
      <section class="px-content relative min-h-[37.5rem] overflow-hidden pt-12 pb-24">
        <FeaturedProjectsWaveBG className="relative w-full" client:load>
          <div class="relative z-10 container mx-auto">
            <div class="mb-8 text-center">
              <h2 class="font-heading text-foreground mb-8 inline-block p-6 text-5xl font-black tracking-tight uppercase">
                {indexPage.data.featuredProjects.title}
              </h2>
              {indexPage.data.featuredProjects.subtitle && (
                <div
                  class="prose prose-xl prose-p:text-foreground/80 mx-auto max-w-2xl"
                  set:html={parseMarkdown(
                    indexPage.data.featuredProjects.subtitle
                  )}
                />
              )}
            </div>
            <div class="grid items-stretch gap-8 lg:grid-cols-2">
              {featuredProjects.map((project) => (
                <ProjectCard
                  project={project}
                  skills={workSkills}
                  variant="light"
                  showBadges={false}
                />
              ))}
            </div>
            {indexPage.data.featuredProjects.showViewAllButton && (
              <div class="mt-12 text-center">
                <a href={indexPage.data.featuredProjects.viewAllButtonLink}>
                  <AstroButton variant="dark" size="lg">
                    {indexPage.data.featuredProjects.viewAllButtonText}
                  </AstroButton>
                </a>
              </div>
            )}
          </div>
        </FeaturedProjectsWaveBG>
      </section>
    )
  }

  <!-- Meet Flateralus Section -->
  {
    indexPage.data.layout.showMeetFlateralusSection && (
      <MeetFlateralusSection
        title={indexPage.data.meetFlateralus?.title}
        content={indexPage.data.meetFlateralus?.content}
        client:only="react"
      />
    )
  }

  <!-- Recent Experience Section -->
  {
    indexPage.data.layout.showRecentExperience && (
      <section class="px-content py-12">
        <div class="container mx-auto">
          <div class="mb-8 text-center">
            <h2 class="font-heading text-foreground mb-8 inline-block p-6 text-5xl font-black tracking-tight uppercase">
              {indexPage.data.recentExperience.title}
            </h2>
            {indexPage.data.recentExperience.subtitle && (
              <div
                class="prose prose-xl prose-p:text-foreground/80 mx-auto max-w-2xl"
                set:html={parseMarkdown(
                  indexPage.data.recentExperience.subtitle
                )}
              />
            )}
          </div>
          <div class="mx-auto max-w-4xl space-y-8">
            {recentJobs.map((job) => (
              <div class="card">
                <div class="mb-4 flex flex-col md:flex-row md:items-center md:justify-between">
                  <div>
                    <h3 class="font-heading text-foreground text-2xl font-black uppercase">
                      {job.data.title}
                    </h3>
                    <p class="text-foreground/80 text-xl">
                      {getCompanyName(job.data.company, workCompanies)}
                    </p>
                  </div>
                  <div class="mt-2 text-right md:mt-0">
                    <p class="text-foreground/60 font-bold">
                      {formatDate(job.data.startDate)} -
                      {job.data.endDate
                        ? formatDate(job.data.endDate)
                        : 'Present'}
                    </p>
                  </div>
                </div>
                {job.data.description && (
                  <div
                    class="prose prose-sm prose-p:text-foreground prose-strong:text-foreground prose-em:text-foreground/90 prose-ul:text-foreground/80 prose-ol:text-foreground/80 prose-li:text-foreground/80 mb-4 max-w-none"
                    set:html={parseMarkdown(job.data.description)}
                  />
                )}
                {job.data.highlights && job.data.highlights.length > 0 && (
                  <ul class="mb-4 list-inside list-disc space-y-1">
                    {job.data.highlights
                      .slice(0, 3)
                      .map((highlight: string) => (
                        <li class="text-foreground/80">{highlight}</li>
                      ))}
                  </ul>
                )}
                {job.data.workSkills && job.data.workSkills.length > 0 && (
                  <div class="flex flex-wrap gap-2">
                    {job.data.workSkills.map((skillKey: string) => {
                      const skill = workSkills.find((s) => s.id === skillKey);
                      return skill ? (
                        <SkillPill size="sm">{skill.data.title}</SkillPill>
                      ) : null;
                    })}
                  </div>
                )}
              </div>
            ))}
          </div>
          {indexPage.data.recentExperience.showViewAllButton && (
            <div class="mt-12 text-center">
              <a href={indexPage.data.recentExperience.viewAllButtonLink}>
                <AstroButton variant="secondary" size="lg">
                  {indexPage.data.recentExperience.viewAllButtonText}
                </AstroButton>
              </a>
            </div>
          )}
        </div>
      </section>
    )
  }

  <!-- Let's Connect Section -->
  {
    indexPage.data.layout.showContactSection && (
      <section class="px-content py-12">
        <div class="container mx-auto">
          <div class="mx-auto max-w-4xl text-center">
            <h2 class="font-heading text-foreground mb-8 p-6 text-5xl font-black tracking-tight uppercase">
              {indexPage.data.contactCTA.title}
            </h2>
            {indexPage.data.contactCTA.text && (
              <div
                class="prose prose-lg prose-p:text-foreground/80 mx-auto mb-12 max-w-2xl"
                set:html={parseMarkdown(indexPage.data.contactCTA.text)}
              />
            )}
            {indexPage.data.contactCTA && (
              <div class="card">
                <ContactForm client:load />
              </div>
            )}
          </div>
        </div>
      </section>
    )
  }
</HomeLayout>
