---
import { getCollection } from 'astro:content';
import { marked } from 'marked';
import { type Breadcrumb, CodeBlock } from '@bracketbear/core';
import { getContentImageUrl } from '@bracketbear/astro-content';
import HeroLayout from '@/layouts/HeroLayout.astro';
import Section from '@/components/Section.astro';
import StickyTOC from '@/components/StickyTOC.astro';
import RepoPanel from '@/components/RepoPanel.astro';

// Helper function to clean markdown content
function cleanMarkdown(content: string | undefined | null): string {
  if (!content) return '';

  return content
    .trim() // Remove leading/trailing whitespace
    .replace(/\\~/g, '~') // Fix escaped tildes
    .replace(/\\\*/g, '*') // Fix escaped asterisks
    .replace(/\n\s*\n\s*\n/g, '\n\n') // Collapse multiple empty lines
    .replace(/\s+$/gm, ''); // Remove trailing whitespace from each line
}

const breadcrumbs: Breadcrumb[] = [
  { label: 'Home', href: '/' },
  { label: 'Source Code', href: '/source-code' },
];

// Get the source-code page singleton
const sourceCodePageEntries = await getCollection('portfolioSourceCodePage');
const sourceCodePage = sourceCodePageEntries[0]; // Singletons have only one entry

// Define sections for TOC - pull from CMS data
const sections = [
  sourceCodePage?.data?.tldr && {
    id: 'tldr',
    title: sourceCodePage.data.tldr.title,
    eyebrow: 'Overview',
  },
  sourceCodePage?.data?.repoMap && {
    id: 'monorepo',
    title: sourceCodePage.data.repoMap.title,
    eyebrow: 'Architecture',
  },
  sourceCodePage?.data?.typescript && {
    id: 'typescript',
    title: sourceCodePage.data.typescript.title,
    eyebrow: 'Type System',
  },
  sourceCodePage?.data?.tailwindSection && {
    id: 'tailwind',
    title: sourceCodePage.data.tailwindSection.title,
    eyebrow: 'Styling',
  },
  sourceCodePage?.data?.dataAssistedStyling && {
    id: 'data-assisted',
    title: sourceCodePage.data.dataAssistedStyling.title,
    eyebrow: 'Styling',
  },
  sourceCodePage?.data?.architecture && {
    id: 'architecture',
    title: sourceCodePage.data.architecture.title,
    eyebrow: 'System',
  },
  sourceCodePage?.data?.contentModel && {
    id: 'content-model',
    title: sourceCodePage.data.contentModel.title,
    eyebrow: 'Data',
  },
  sourceCodePage?.data?.storybook && {
    id: 'storybook',
    title: sourceCodePage.data.storybook.title,
    eyebrow: 'Development',
  },
  sourceCodePage?.data?.flateralus && {
    id: 'flateralus',
    title: sourceCodePage.data.flateralus.title,
    eyebrow: 'Performance',
  },
  sourceCodePage?.data?.performanceAccessibility && {
    id: 'performance-accessibility',
    title: sourceCodePage.data.performanceAccessibility.title,
    eyebrow: 'Quality',
  },
  sourceCodePage?.data?.testingDx && {
    id: 'testing-dx',
    title: sourceCodePage.data.testingDx.title,
    eyebrow: 'Development',
  },
  sourceCodePage?.data?.securityOps && {
    id: 'security-ops',
    title: sourceCodePage.data.securityOps.title,
    eyebrow: 'Operations',
  },
  sourceCodePage?.data?.futureChanges && {
    id: 'future-changes',
    title: sourceCodePage.data.futureChanges.title,
    eyebrow: 'Roadmap',
  },
  sourceCodePage?.data?.closing && {
    id: 'closing',
    title: sourceCodePage.data.closing.title,
    eyebrow: 'Conclusion',
  },
].filter(Boolean);

// Load the auto-generated repo map
let repoMapData = null;
try {
  repoMapData = await import('@/generated/repo-map.json');
} catch (error) {
  console.warn('Failed to load repo map data:', error);
}
---

<HeroLayout
  pageTitle="Source Code"
  title={sourceCodePage.data.title}
  subtitle={sourceCodePage.data.subtitle}
  breadcrumbs={breadcrumbs}
  animationPreset="particle-sphere"
  currentPage="source-code"
>
  <div class="container-content">
    <div class="flex gap-6">
      <StickyTOC sections={sections} />
      <div class="min-w-0 flex-1">
        {/* TL;DR Section */}
        {
          sourceCodePage?.data?.tldr && (
            <Section
              id="tldr"
              eyebrow="Overview"
              title={sourceCodePage.data.tldr.title}
            >
              <div class="grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3">
                {sourceCodePage.data.tldr.points.map((point: any) => (
                  <div class="bg-brand-dark/90 border-border/20 rounded-lg border p-6 shadow-[0_4px_16px_0_rgba(0,0,0,0.3)] backdrop-blur-md">
                    <h3 class="font-heading mb-4 text-xl font-bold tracking-tight text-white">
                      {point.label}
                    </h3>
                    <ul class="list-outside list-disc space-y-2 pl-5 text-white/90">
                      {point.bullets?.map((b: string) => (
                        <li>{b}</li>
                      ))}
                    </ul>
                  </div>
                ))}
              </div>
            </Section>
          )
        }

        {/* Repo Map Section */}
        {
          sourceCodePage?.data?.repoMap && (
            <Section
              id="monorepo"
              eyebrow="Architecture"
              title={sourceCodePage.data.repoMap.title}
              intro={sourceCodePage.data.repoMap.description}
            >
              <div>
                <div class="mb-6">
                  <h3 class="font-heading text-foreground mb-2 text-xl font-bold">
                    Repository Structure
                  </h3>
                  <p class="text-muted-foreground">
                    A monorepo containing{' '}
                    {repoMapData?.default?.apps?.length || 0} applications and{' '}
                    {repoMapData?.default?.packages?.length || 0} shared
                    packages.
                  </p>
                </div>

                <div class="grid grid-cols-1 gap-6 lg:grid-cols-2">
                  {/* Apps Panel */}
                  {repoMapData && (
                    <RepoPanel title="Apps" items={repoMapData.default.apps} />
                  )}

                  {/* Packages Panel */}
                  {repoMapData && (
                    <RepoPanel
                      title="Packages"
                      items={repoMapData.default.packages}
                    />
                  )}
                </div>
              </div>
            </Section>
          )
        }

        {/* TypeScript Section */}
        {
          sourceCodePage?.data?.typescript && (
            <Section
              id="typescript"
              eyebrow="Type System"
              title={sourceCodePage.data.typescript.title}
              intro={sourceCodePage.data.typescript.content}
            >
              {sourceCodePage.data.typescript.patterns?.length > 0 && (
                <div class="space-y-10 md:space-y-14">
                  {sourceCodePage.data.typescript.patterns.map(
                    (p: any, i: number) => (
                      <div class="border-border/20 bg-card/20 w-full rounded-lg border px-4 py-6 shadow-[0_2px_8px_0_rgba(31,38,135,0.1)] backdrop-blur-md md:py-8">
                        <div class="grid grid-cols-1 items-start gap-6 lg:grid-cols-2 lg:gap-10">
                          <div
                            class={`flex flex-col gap-4 ${i % 2 === 1 ? 'lg:order-2 lg:text-right' : ''}`}
                          >
                            <h3 class="font-heading text-foreground text-xl tracking-tight uppercase md:text-2xl">
                              {p.title}
                            </h3>
                            <div class="prose prose-lg prose-headings:text-foreground prose-p:text-foreground/90 prose-strong:text-foreground prose-em:text-foreground/90 max-w-none">
                              <Fragment
                                set:html={marked.parse(
                                  cleanMarkdown(p.description)
                                )}
                              />
                            </div>
                          </div>
                          <div class={`${i % 2 === 1 ? 'lg:order-1' : ''}`}>
                            <CodeBlock
                              code={p.codeExample}
                              language="ts"
                              showLineNumbers
                            />
                          </div>
                        </div>
                      </div>
                    )
                  )}
                </div>
              )}
            </Section>
          )
        }

        {/* Why Tailwind Section */}
        {
          sourceCodePage?.data?.tailwindSection && (
            <Section
              id="tailwind"
              eyebrow="Styling"
              title={sourceCodePage.data.tailwindSection.title}
              intro={sourceCodePage.data.tailwindSection.content}
            >
              {/* Rules */}
              <div class="mb-8">
                <h3 class="font-heading text-foreground mb-4 text-xl font-bold tracking-tight">
                  Rules I follow
                </h3>
                <ul class="list-outside list-disc space-y-2 pl-5">
                  {sourceCodePage.data.tailwindSection.rules.map(
                    (rule: string) => (
                      <li class="text-foreground/90">{rule}</li>
                    )
                  )}
                </ul>
              </div>

              {/* Token Excerpt */}
              <div class="mb-8">
                <h3 class="font-heading mb-4 text-xl font-bold tracking-tight text-white">
                  {sourceCodePage.data.tailwindSection.tokenExcerptTitle}
                </h3>
                <div class="mb-3">
                  <div class="flex items-center gap-2">
                    <span class="text-muted-foreground text-xs font-medium">
                      theme.css
                    </span>
                    <span class="text-muted-foreground/80 text-xs">css</span>
                  </div>
                </div>
                <CodeBlock
                  code={sourceCodePage.data.tailwindSection.tokenExcerpt}
                  language="css"
                  showLineNumbers
                  className="bg-brand-dark/90 text-white"
                />
              </div>

              {/* Usage Example */}
              <div>
                <h3 class="font-heading text-foreground mb-4 text-xl font-bold tracking-tight">
                  {sourceCodePage.data.tailwindSection.usageExampleTitle}
                </h3>
                <div class="mb-3">
                  <div class="flex items-center gap-2">
                    <span class="text-muted-foreground text-xs font-medium">
                      component.html
                    </span>
                    <span class="text-muted-foreground/80 text-xs">html</span>
                  </div>
                </div>
                <CodeBlock
                  code={sourceCodePage.data.tailwindSection.usageExample}
                  language="html"
                />
              </div>
            </Section>
          )
        }

        {/* Data-assisted styling Section */}
        {
          sourceCodePage?.data?.dataAssistedStyling && (
            <Section
              id="data-assisted"
              eyebrow="Styling"
              title={sourceCodePage.data.dataAssistedStyling.title}
              intro={sourceCodePage.data.dataAssistedStyling.content}
            >
              <div class="mb-3">
                <div class="flex items-center gap-2">
                  <span class="text-muted-foreground text-xs font-medium">
                    tw-patterns.json
                  </span>
                  <span class="text-muted-foreground/80 text-xs">json</span>
                </div>
              </div>
              <CodeBlock
                code={sourceCodePage.data.dataAssistedStyling.codeExample}
                language="json"
                className="bg-brand-dark/90 text-white"
              />
            </Section>
          )
        }

        {/* Architecture Section */}
        {
          sourceCodePage?.data?.architecture && (
            <Section
              id="architecture"
              eyebrow="System"
              title={sourceCodePage.data.architecture.title}
              intro={sourceCodePage.data.architecture.content}
            >
              <div class="mb-8">
                <h3 class="font-heading text-foreground mb-4 text-xl font-bold tracking-tight">
                  System Flow
                </h3>
                <div class="prose prose-lg max-w-none">
                  <div class="mb-6">
                    <div class="bg-muted/20 card-neutral rounded-lg p-6">
                      <div class="text-muted-foreground mb-4 text-sm">
                        Architecture Flow
                      </div>
                      <div class="space-y-3 text-sm">
                        <div class="flex items-center gap-2">
                          <span class="bg-primary text-primary-foreground rounded px-3 py-1 text-xs">
                            User
                          </span>
                          <span class="text-muted-foreground">→</span>
                          <span class="bg-secondary text-secondary-foreground rounded px-3 py-1 text-xs">
                            CDN
                          </span>
                        </div>
                        <div class="flex items-center gap-2">
                          <span class="bg-secondary text-secondary-foreground rounded px-3 py-1 text-xs">
                            CDN
                          </span>
                          <span class="text-muted-foreground">→</span>
                          <span class="bg-brand-orange rounded px-3 py-1 text-xs text-white">
                            Astro Static Pages
                          </span>
                        </div>
                        <div class="flex items-center gap-2">
                          <span class="bg-brand-orange rounded px-3 py-1 text-xs text-white">
                            Astro
                          </span>
                          <span class="text-muted-foreground">→</span>
                          <span class="bg-brand-blue rounded px-3 py-1 text-xs text-white">
                            React Islands
                          </span>
                          <span class="text-muted-foreground text-xs">
                            (hydrate as needed)
                          </span>
                        </div>
                        <div class="flex items-center gap-2">
                          <span class="bg-brand-orange rounded px-3 py-1 text-xs text-white">
                            Astro
                          </span>
                          <span class="text-muted-foreground">→</span>
                          <span class="bg-brand-green rounded px-3 py-1 text-xs text-white">
                            Keystatic Build
                          </span>
                          <span class="text-muted-foreground text-xs">
                            (Zod typed)
                          </span>
                        </div>
                        <div class="flex items-center gap-2">
                          <span class="bg-brand-blue rounded px-3 py-1 text-xs text-white">
                            Islands
                          </span>
                          <span class="text-muted-foreground">→</span>
                          <span class="bg-brand-purple rounded px-3 py-1 text-xs text-white">
                            Flateralus Runtime
                          </span>
                          <span class="text-muted-foreground text-xs">
                            (PIXI 8)
                          </span>
                        </div>
                        <div class="flex items-center gap-2">
                          <span class="bg-brand-orange rounded px-3 py-1 text-xs text-white">
                            Astro
                          </span>
                          <span class="text-muted-foreground">→</span>
                          <span class="bg-muted text-muted-foreground rounded px-3 py-1 text-xs">
                            Image/Asset Pipeline
                          </span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </Section>
          )
        }

        {/* Content Model Section */}
        {
          sourceCodePage?.data?.contentModel && (
            <Section
              id="content-model"
              eyebrow="Data"
              title={sourceCodePage.data.contentModel.title}
              intro={sourceCodePage.data.contentModel.content}
            >
              <div class="mb-3">
                <div class="flex items-center gap-2">
                  <span class="text-muted-foreground text-xs font-medium">
                    content-schema.ts
                  </span>
                  <span class="text-muted-foreground/80 text-xs">ts</span>
                </div>
              </div>
              <CodeBlock
                code={sourceCodePage.data.contentModel.codeExample}
                language="ts"
                className="bg-brand-dark/90 text-white"
              />
            </Section>
          )
        }

        {/* Storybook Section */}
        {
          sourceCodePage?.data?.storybook && (
            <Section
              id="storybook"
              eyebrow="Development"
              title={sourceCodePage.data.storybook.title}
              intro={sourceCodePage.data.storybook.content}
            >
              {sourceCodePage.data.storybook.mediaImage && (
                <img
                  src={(() => {
                    // Extract the relative path from the CMS image path
                    // CMS stores: /content-images/sites/portfolio/source-code-page/storybook/storybook/mediaImage.png
                    // We need: storybook/mediaImage.png for getContentImageUrl
                    const imagePath = sourceCodePage.data.storybook.mediaImage;
                    if (
                      imagePath.startsWith(
                        '/content-images/sites/portfolio/source-code-page/'
                      )
                    ) {
                      const relativePath = imagePath.replace(
                        '/content-images/sites/portfolio/source-code-page/',
                        ''
                      );
                      return getContentImageUrl(
                        'sites/portfolio',
                        'source-code-page',
                        relativePath
                      );
                    }
                    return imagePath;
                  })()}
                  alt="Storybook interface showing component documentation and preview"
                  class=""
                />
              )}
            </Section>
          )
        }

        {/* Flateralus Section */}
        {
          sourceCodePage?.data?.flateralus && (
            <Section
              id="flateralus"
              eyebrow="Performance"
              title={sourceCodePage.data.flateralus.title}
              intro={sourceCodePage.data.flateralus.content}
            >
              <div class="mb-3">
                <div class="flex items-center gap-2">
                  <span class="text-muted-foreground text-xs font-medium">
                    flateralus.ts
                  </span>
                  <span class="text-muted-foreground/80 text-xs">ts</span>
                </div>
              </div>
              <CodeBlock
                code={sourceCodePage.data.flateralus.codeExample}
                language="ts"
                className="bg-brand-dark/90 text-white"
              />
            </Section>
          )
        }

        {/* Performance & Accessibility Section */}
        {
          sourceCodePage?.data?.performanceAccessibility && (
            <Section
              id="performance-accessibility"
              eyebrow="Quality"
              title={sourceCodePage.data.performanceAccessibility.title}
            >
              <div class="grid grid-cols-1 gap-6 md:grid-cols-2">
                <div class="card-neutral">
                  <h3 class="font-heading text-foreground mb-4 text-xl font-bold tracking-tight">
                    Targets
                  </h3>
                  <div class="prose prose-lg max-w-none">
                    <Fragment
                      set:html={marked.parse(
                        cleanMarkdown(
                          sourceCodePage.data.performanceAccessibility.targets
                        )
                      )}
                    />
                  </div>
                </div>
                <div class="card-neutral">
                  <h3 class="font-heading text-foreground mb-4 text-xl font-bold tracking-tight">
                    How I get there
                  </h3>
                  <div class="prose prose-lg max-w-none">
                    <Fragment
                      set:html={marked.parse(
                        cleanMarkdown(
                          sourceCodePage.data.performanceAccessibility
                            .howToGetThere
                        )
                      )}
                    />
                  </div>
                </div>
              </div>
            </Section>
          )
        }

        {/* Testing & DX Section */}
        {
          sourceCodePage?.data?.testingDx && (
            <Section
              id="testing-dx"
              eyebrow="Development"
              title={sourceCodePage.data.testingDx.title}
              intro={sourceCodePage.data.testingDx.content}
            >
              <div class="space-y-8">
                {/* Husky Workflow */}
                <div class="card-neutral">
                  <div class="prose prose-lg max-w-none">
                    <Fragment
                      set:html={marked.parse(
                        cleanMarkdown(
                          sourceCodePage.data.testingDx
                            .huskyWorkflowDescription ||
                            '**Pre-commit & Pre-merge Hooks:** Every commit triggers branch protection and runs lint-staged for formatting. When merging into dev, comprehensive checks run including formatting, linting, TypeScript validation, tests, build verification, and dependency audits.'
                        )
                      )}
                    />
                  </div>
                </div>

                {/* Vitest Setup */}
                <div class="card-neutral">
                  <div class="prose prose-lg max-w-none">
                    <Fragment
                      set:html={marked.parse(
                        cleanMarkdown(
                          sourceCodePage.data.testingDx.vitestDescription ||
                            '**Monorepo Testing Setup:** Single Vitest configuration at the root handles all packages and apps. Tests are co-located with source files and use jsdom environment for React component testing with Testing Library.'
                        )
                      )}
                    />
                  </div>
                </div>

                {/* Test Patterns */}
                <div class="card-neutral">
                  <div class="prose prose-lg max-w-none">
                    <Fragment
                      set:html={marked.parse(
                        cleanMarkdown(
                          sourceCodePage.data.testingDx
                            .testExampleDescription ||
                            '**Component Testing Pattern:** Tests focus on accessibility and user behavior rather than implementation details. Uses semantic queries and checks actual DOM content rather than props.'
                        )
                      )}
                    />
                  </div>
                </div>
              </div>
            </Section>
          )
        }

        {/* Security & Ops Section */}
        {
          sourceCodePage?.data?.securityOps && (
            <Section
              id="security-ops"
              eyebrow="Operations"
              title={sourceCodePage.data.securityOps.title}
              intro={sourceCodePage.data.securityOps.content}
            />
          )
        }

        {/* Future Changes Section */}
        {
          sourceCodePage?.data?.futureChanges && (
            <Section
              id="future-changes"
              eyebrow="Roadmap"
              title={sourceCodePage.data.futureChanges.title}
            >
              <div class="card-neutral">
                <ul class="list-outside list-disc space-y-3 pl-5">
                  {sourceCodePage.data.futureChanges.items.map(
                    (item: string) => (
                      <li class="text-foreground/90">
                        <div class="prose prose-lg max-w-none">
                          <Fragment
                            set:html={marked.parse(cleanMarkdown(item))}
                          />
                        </div>
                      </li>
                    )
                  )}
                </ul>
              </div>
            </Section>
          )
        }

        {/* Closing Section */}
        {
          sourceCodePage?.data?.closing && (
            <Section
              id="closing"
              eyebrow="Conclusion"
              title={sourceCodePage.data.closing.title}
              intro={sourceCodePage.data.closing.content}
            />
          )
        }

        {/* Footer Meta */}
        <footer class="section-content border-border border-t py-8">
          <div class="mx-auto max-w-4xl">
            <div
              class="text-muted-foreground flex flex-col gap-4 text-center text-sm"
            >
              <div>
                <strong>Last updated:</strong>
                {
                  new Date().toLocaleDateString('en-US', {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric',
                  })
                }
              </div>
              <div>
                Built with <strong>Astro</strong>, <strong>React islands</strong
                >, <strong>Tailwind tokens</strong>, <strong>Keystatic</strong> +
                <strong>Zod</strong>
              </div>
            </div>
          </div>
        </footer>
      </div>
    </div>
  </div>
</HeroLayout>
