---
import { getCollection, type CollectionEntry } from 'astro:content';
import { getBreadcrumbs } from '@/config/breadcrumbs';
import HeroLayout from '@/layouts/HeroLayout.astro';
import ProjectCard from '@/components/ProjectCard';
import { marked } from 'marked';

// Type definitions
type WorkProjectEntry = CollectionEntry<'workProject'>;

interface ProjectCategory {
  title: string;
  description: string;
  projects: string[];
}

interface CategoryWithProjects {
  category: {
    data: {
      title: string;
      description: string;
    };
  };
  projects: WorkProjectEntry[];
}

// Get the projects page singleton from CMS
const projectsPageEntries = await getCollection('portfolioProjectsPage');
const projectsPage = projectsPageEntries[0]; // Singletons have only one entry

const workProject = await getCollection('workProject');
const breadcrumbs = getBreadcrumbs({
  label: 'Projects',
  href: '/projects',
});

// Get projects by CMS-defined categories
const projectsByCategory: CategoryWithProjects[] =
  projectsPage.data.projectCategories?.map((category: ProjectCategory) => {
    const categoryProjects = workProject.filter((project: WorkProjectEntry) =>
      category.projects.includes(project.id)
    );

    return {
      category: {
        data: {
          title: category.title,
          description: category.description,
        },
      },
      projects: categoryProjects,
    };
  }) || [];

// Get skills for project cards
const workSkills = await getCollection('workSkills');

// Helper function to parse markdown content
function parseMarkdown(content: string): string {
  return marked.parse(content) as string;
}
---

<HeroLayout
  pageTitle={projectsPage.data.title}
  title={projectsPage.data.title}
  subtitle={projectsPage.data.subtitle}
  breadcrumbs={breadcrumbs}
  animationPreset="blob"
  contactCTA={projectsPage.data.contactCTA}
  metaDescription={projectsPage.data.metaDescription}
  currentPage="project"
>
  <!-- Introduction Section -->
  <section class="px-content mb-40">
    <div class="container mx-auto text-center">
      <div
        class="prose prose-xl prose-headings:text-text-primary prose-p:text-text-primary/90 text-text-primary/90 mx-auto max-w-prose text-center"
        set:html={parseMarkdown(projectsPage.data.introduction)}
      />
    </div>
  </section>

  <!-- Projects by Category Section -->
  <div class="px-content mb-40">
    <div class="container mx-auto">
      <div class="space-y-16">
        {
          projectsByCategory.map(
            ({ category, projects }: CategoryWithProjects) => (
              <section>
                {/* Section Title */}
                <div class="py-12">
                  <h2 class="font-heading text-text-primary inline-block text-4xl font-black tracking-tight uppercase">
                    {category.data.title}
                  </h2>
                  {category.data.description && (
                    <p class="prose-lg text-text-primary/70 mt-4 max-w-prose">
                      {category.data.description}
                    </p>
                  )}
                </div>

                <div class="grid gap-8 lg:grid-cols-2 xl:grid-cols-3">
                  {projects.map((project: WorkProjectEntry) => {
                    // Use default card color (off-white) for consistency
                    return (
                      <ProjectCard
                        project={project}
                        skills={workSkills}
                        variant="light"
                        showImage={true}
                        showBadges={false}
                        showSkills={true}
                        maxSkills={5}
                        compact={true}
                      />
                    );
                  })}
                </div>
              </section>
            )
          )
        }
      </div>
    </div>
  </div>
</HeroLayout>
