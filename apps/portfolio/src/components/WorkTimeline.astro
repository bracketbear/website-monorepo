---
import { getCollection } from 'astro:content';
import Timeline from './Timeline.astro';
import TimelineItem from './TimelineItem.astro';
import Accordion from './Accordion.astro';
import { getKeyedCollection } from '@/utils/content';

interface Props {
  variant?: 'simple' | 'detailed';
}

interface JobData {
  title: string;
  company: string;
  startDate: string;
  endDate?: string;
  description?: string;
  workSkills?: string[];
  isCurrentJob?: boolean;
}

interface Job {
  id: string;
  data: JobData;
}

interface CompanyData {
  title: string;
  description?: string;
  logo?: string;
  website?: string;
  location?: string;
}

interface Company {
  id: string;
  data: CompanyData;
}

interface Skill {
  data: {
    title: string;
  };
}

const jobs = (await getCollection('workJobs')) as unknown as Job[];
const companies = (await getKeyedCollection('workCompany')) as Record<
  string,
  Company
>;
const skillsCollection = (await getKeyedCollection('workSkills')) as Record<
  string,
  Skill
>;

// Sort jobs by start date (newest first)
const sortedJobs = jobs.sort((a, b) => {
  const aDate = new Date(a.data.startDate);
  const bDate = new Date(b.data.startDate);
  return bDate.getTime() - aDate.getTime();
});

// Group jobs by company
const jobsByCompany = sortedJobs.reduce<Record<string, Job[]>>((acc, job) => {
  const { data } = job;
  const { company: companyKey } = data;

  acc[companyKey] ||= [];
  acc[companyKey].push(job);
  return acc;
}, {});

// Sort companies by most recent job's start date
const sortedCompanies = Object.entries(jobsByCompany)
  .map(([companyKey, companyJobs]) => {
    const company = companies[companyKey];
    const mostRecentJob = companyJobs.reduce((latest, current) => {
      const latestDate = new Date(latest.data.startDate);
      const currentDate = new Date(current.data.startDate);
      return currentDate > latestDate ? current : latest;
    }, companyJobs[0]);

    return {
      company,
      jobs: companyJobs,
      mostRecentStart: new Date(mostRecentJob.data.startDate),
    };
  })
  .sort((a, b) => b.mostRecentStart.getTime() - a.mostRecentStart.getTime());

// Format job date
const formatDate = (dateString: string | undefined) => {
  if (!dateString) return 'Present';
  return new Date(dateString).toLocaleDateString('en-US', {
    month: 'short',
    year: 'numeric',
  });
};
---

<div class="space-y-16">
  <h2
    class="brutalist-border bg-background text-foreground inline-block p-6 text-4xl font-black uppercase"
  >
    Work History
  </h2>

  <div class="space-y-12">
    {
      sortedCompanies.map(({ company, jobs }) => (
        <div class="brutalist-border bg-background p-8">
          <div class="mb-8">
            <h3 class="text-foreground text-2xl font-black uppercase">
              {company.data.title}
            </h3>
            {company.data.description && (
              <p class="text-foreground mt-2 font-bold">
                {company.data.description}
              </p>
            )}
          </div>

          <div class="relative space-y-8">
            {jobs.map((job, index) => (
              <div class="relative">
                {/* Timeline connector */}
                {index < jobs.length - 1 && (
                  <div class="bg-border absolute top-12 left-[1.65rem] h-full w-0.5" />
                )}

                <div class="flex gap-6">
                  {/* Timeline dot */}
                  <div class="brutalist-border bg-primary mt-1.5 h-8 w-8 shrink-0" />

                  <div class="flex-1">
                    <div class="mb-4">
                      <h4 class="text-foreground text-xl font-black uppercase">
                        {job.data.title}
                      </h4>
                      <p class="text-foreground font-bold">
                        {formatDate(job.data.startDate)} -{' '}
                        {formatDate(job.data.endDate)}
                      </p>
                    </div>

                    {job.data.description && (
                      <p class="text-foreground mb-4 font-bold">
                        {job.data.description}
                      </p>
                    )}

                    {job.data.workSkills && job.data.workSkills.length > 0 && (
                      <div class="flex flex-wrap gap-2">
                        {job.data.workSkills.map(
                          (skillId: string) =>
                            skillsCollection[skillId] !== undefined && (
                              <span class="brutalist-border-light bg-background text-foreground px-3 py-1 text-sm font-bold">
                                {skillsCollection[skillId].data.title}
                              </span>
                            )
                        )}
                      </div>
                    )}
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      ))
    }
  </div>
</div>
