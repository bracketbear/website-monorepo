---
/**
 * ProjectHeaderLayout - Project-specific header layout with left-aligned text and right-aligned cover image
 *
 * This layout provides a project header section with left-aligned text content
 * and a cover image displayed on the right side.
 *
 * Usage:
 * <ProjectHeaderLayout
 *   pageTitle="Project Title"
 *   title="Project Title"
 *   subtitle="Project Category"
 *   description="Project description"
 *   coverImage="path/to/image.jpg"
 *   coverAlt="Alt text for image"
 *   breadcrumbs={breadcrumbs}
 *   stats={stats}
 * >
 *   <!-- Page content here -->
 * </ProjectHeaderLayout>
 */
import Layout from './Layout.astro';
import { clsx, Stats } from '@bracketbear/core';
import { generatePortfolioMetaTitle } from '@/config/meta-title';
import { Picture } from 'astro:assets';

export interface Props {
  pageTitle?: string;
  title?: string;
  subtitle?: string;
  description?: string;
  coverImage?: string;
  coverAlt?: string;
  stats?: any[];
  hideContactForm?: boolean;
  hideFooter?: boolean;
  hideNavigation?: boolean;
  breadcrumbs?: any;
  container?: boolean;
  contactCTA?: {
    text: string;
    buttonText: string;
    buttonLink: string;
  };
  metaDescription?: string;
  currentPage?: string;
}

const {
  pageTitle,
  container = true,
  contactCTA,
  metaDescription,
  currentPage,
  ...props
} = Astro.props;

// Generate meta title from page title
const metaTitle = pageTitle ? generatePortfolioMetaTitle(pageTitle) : undefined;
---

<Layout
  {...props}
  hideNavigation={false}
  title={metaTitle}
  description={metaDescription}
  class="bg-background"
  navigationVariant="glass"
  breadcrumbs={props.breadcrumbs}
  currentPage={currentPage}
>
  {
    props.title && (
      <section class="from-muted via-muted/95 to-secondary/20 relative w-full bg-gradient-to-br">
        <div class="bg-noise bg-header-glow from-muted/50 absolute inset-0 bg-gradient-to-t via-transparent to-transparent opacity-100" />
        <div class="z-10 container mx-auto flex min-h-[60vh] items-center">
          <div class="flex w-full flex-col items-center justify-center lg:flex-row">
            <div class="order-2 flex-1 px-4 py-8 lg:order-1 lg:py-24">
              <div class="max-w-2xl">
                {props.description && (
                  <p class="text-text-primary mb-4 text-base font-bold tracking-tight uppercase drop-shadow-lg lg:mb-6 lg:text-2xl">
                    {props.description}
                  </p>
                )}

                <h1 class="font-heading text-text-primary mb-4 text-3xl font-black tracking-tight uppercase text-shadow-lg lg:mb-6 lg:text-6xl xl:text-8xl">
                  {props.title}
                </h1>

                {props.subtitle && (
                  <p class="text-text-primary text-base font-bold tracking-tight uppercase text-shadow-lg lg:text-xl xl:text-2xl">
                    {props.subtitle}
                  </p>
                )}
              </div>
            </div>

            {props.coverImage && (
              <div class="order-1 flex flex-1 items-center justify-center px-4 py-4 lg:order-2 lg:py-24">
                <div class="relative w-full max-w-md lg:max-w-lg">
                  <div class="overflow-hidden rounded-lg border-2 border-white/20 shadow-2xl shadow-black/30">
                    <Picture
                      src={props.coverImage}
                      alt={
                        props.coverAlt || props.title || 'Project cover image'
                      }
                      width={640}
                      height={480}
                      formats={['avif', 'webp']}
                      layout="constrained"
                      fit="cover"
                      class="h-auto w-full"
                    />
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>

        {props.stats && props.stats.length > 0 && (
          <div class="relative z-20 container mx-auto mt-8 w-full lg:absolute lg:inset-x-0 lg:bottom-0 lg:mt-0">
            <div class="relative mb-4 lg:-mb-16">
              <Stats
                stats={props.stats}
                className="drop-shadow-xl drop-shadow-black/30"
              />
            </div>
          </div>
        )}
      </section>
    )
  }

  <div
    class={clsx(
      'relative',
      props.title && props.stats && props.stats.length > 0
        ? 'pt-8 pb-8 lg:pt-24 lg:pb-12'
        : props.title
          ? 'py-12 lg:py-16'
          : 'py-12',
      props.hideFooter && 'pb-0'
    )}
  >
    <div class={clsx(container && 'container mx-auto')}>
      <slot />
    </div>
  </div>

  {
    contactCTA && (
      <div class="bg-muted py-12">
        <div class="container mx-auto">
          <div class="mx-auto max-w-4xl text-center">
            <p class="text-muted-foreground/90 mb-8 text-xl leading-relaxed font-medium">
              {contactCTA.text}
            </p>
            <a
              href={contactCTA.buttonLink}
              class="button button-primary button-lg"
            >
              {contactCTA.buttonText}
            </a>
          </div>
        </div>
      </div>
    )
  }
</Layout>
