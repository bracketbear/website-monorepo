---
/**
 * ProjectHeaderLayout - Project-specific header layout with left-aligned text and right-aligned cover image
 *
 * This layout provides a project header section with left-aligned text content
 * and a cover image displayed on the right side.
 *
 * Usage:
 * <ProjectHeaderLayout
 *   pageTitle="Project Title"
 *   title="Project Title"
 *   subtitle="Project Category"
 *   description="Project description"
 *   coverImage="path/to/image.jpg"
 *   coverAlt="Alt text for image"
 *   breadcrumbs={breadcrumbs}
 *   stats={stats}
 * >
 *   <!-- Page content here -->
 * </ProjectHeaderLayout>
 */
import Layout from './Layout.astro';
import { clsx, Stats, type ObjectValues } from '@bracketbear/core';
import { navigationConfig } from '@/config/navigation';
import { generatePortfolioMetaTitle } from '@/config/meta-title';
import { Picture } from 'astro:assets';
import ErrorBoundary from '@/components/ErrorBoundary';

export interface Props {
  pageTitle?: string;
  title?: string;
  subtitle?: string;
  description?: string;
  coverImage?: string;
  coverAlt?: string;
  stats?: any[];
  hideContactForm?: boolean;
  hideFooter?: boolean;
  hideNavigation?: boolean;
  breadcrumbs?: any;
  container?: boolean;
  contactCTA?: {
    text: string;
    buttonText: string;
    buttonLink: string;
  };
  metaDescription?: string;
}

const {
  pageTitle,
  container = true,
  contactCTA,
  metaDescription,
  ...props
} = Astro.props;

// Generate meta title from page title
const metaTitle = pageTitle ? generatePortfolioMetaTitle(pageTitle) : undefined;
---

<Layout
  {...props}
  hideNavigation={false}
  title={metaTitle}
  description={metaDescription}
  class="bg-background"
  navigationVariant="glass"
  breadcrumbs={props.breadcrumbs}
>
  <!-- Project Header Section -->
  {
    props.title && (
      <section class="relative w-full bg-gradient-to-br from-muted via-muted/95 to-secondary/20">
        <!-- Background patterns -->
        <div class="bg-noise absolute inset-0 opacity-5"></div>
        <div class="bg-animated-grid absolute inset-0 opacity-10"></div>
        <div class="bg-header-glow absolute inset-0"></div>
        <div class="from-muted/50 absolute inset-0 bg-gradient-to-t via-transparent to-transparent"></div>
        
        <!-- Content container -->
        <div class="relative z-10 container mx-auto h-full flex items-center">
          <div class="flex flex-col lg:flex-row w-full items-center justify-center">
            <!-- Left side: Text content -->
            <div class="flex-1 px-4 py-16 lg:py-40 order-2 lg:order-1">
              <div class="max-w-2xl">
                <!-- Description (if provided) -->
                {
                  props.description && (
                    <p class="text-text-primary/90 text-lg lg:text-2xl font-bold tracking-tight uppercase drop-shadow-lg mb-6">
                      {props.description}
                    </p>
                  )
                }
                
                <!-- Title -->
                <h1 class="font-heading text-text-primary text-4xl lg:text-6xl xl:text-8xl font-black tracking-tight uppercase text-shadow-lg mb-6">
                  {props.title}
                </h1>
                
                <!-- Subtitle -->
                {
                  props.subtitle && (
                    <p class="text-text-primary/90 text-lg lg:text-xl xl:text-2xl font-bold tracking-tight uppercase text-shadow-lg">
                      {props.subtitle}
                    </p>
                  )
                }
              </div>
            </div>
            
            <!-- Right side: Cover image -->
            {
              props.coverImage && (
                <div class="flex-1 flex items-center justify-center px-4 py-8 lg:py-40 order-1 lg:order-2">
                  <div class="relative max-w-lg w-full">
                    <div class="overflow-hidden rounded-lg border-2 border-white/20 shadow-2xl shadow-black/30">
                      <Picture
                        src={props.coverImage}
                        alt={props.coverAlt || props.title || 'Project cover image'}
                        width={640}
                        height={480}
                        formats={['avif', 'webp']}
                        layout="constrained"
                        fit="cover"
                        class="w-full h-auto max-w-sm lg:max-w-lg"
                      />
                    </div>
                    <!-- Decorative elements -->
                    <div class="absolute -top-2 -right-2 w-4 h-4 bg-brand-yellow rounded-full shadow-lg hidden lg:block"></div>
                    <div class="absolute -bottom-2 -left-2 w-3 h-3 bg-brand-orange rounded-full shadow-lg hidden lg:block"></div>
                  </div>
                </div>
              )
            }
          </div>
        </div>
        
        <!-- Stats section - positioned as overlay at bottom -->
        {
          props.stats && props.stats.length > 0 && (
            <div class="absolute inset-x-0 bottom-0 z-20 container mx-auto w-full">
              <div class="relative -mb-8">
                <Stats
                  stats={props.stats}
                  className="drop-shadow-xl drop-shadow-black/30"
                />
              </div>
            </div>
          )
        }
      </section>
    )
  }

  <!-- Page Content -->
  <div
    class={clsx(
      'relative',
      props.title ? 'py-32' : 'py-24',
      props.hideFooter && 'pb-0'
    )}
  >
    <div class={clsx(container && 'container mx-auto')}>
      <slot />
    </div>
  </div>

  <!-- Contact CTA Section -->
  {
    contactCTA && (
      <div class="bg-muted py-24">
        <div class="container mx-auto">
          <div class="mx-auto max-w-4xl text-center">
            <p class="text-muted-foreground/90 mb-8 text-xl leading-relaxed font-medium">
              {contactCTA.text}
            </p>
            <a
              href={contactCTA.buttonLink}
              class="button button-primary button-lg"
            >
              {contactCTA.buttonText}
            </a>
          </div>
        </div>
      </div>
    )
  }
</Layout>
